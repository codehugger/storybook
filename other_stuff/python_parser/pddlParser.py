# Generated from pddl.g4 by ANTLR 4.7.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys

def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3{")
        buf.write("\u040d\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\3\2\3\2\5\2\u00a1\n\2\3\3\3\3\3\3\3\3\5")
        buf.write("\3\u00a7\n\3\3\3\5\3\u00aa\n\3\3\3\5\3\u00ad\n\3\3\3\5")
        buf.write("\3\u00b0\n\3\3\3\5\3\u00b3\n\3\3\3\5\3\u00b6\n\3\3\3\7")
        buf.write("\3\u00b9\n\3\f\3\16\3\u00bc\13\3\3\3\3\3\3\4\3\4\3\4\3")
        buf.write("\4\3\4\3\5\3\5\3\5\6\5\u00c8\n\5\r\5\16\5\u00c9\3\5\3")
        buf.write("\5\3\6\3\6\3\6\3\6\3\6\3\7\7\7\u00d4\n\7\f\7\16\7\u00d7")
        buf.write("\13\7\3\7\6\7\u00da\n\7\r\7\16\7\u00db\3\7\7\7\u00df\n")
        buf.write("\7\f\7\16\7\u00e2\13\7\5\7\u00e4\n\7\3\b\6\b\u00e7\n\b")
        buf.write("\r\b\16\b\u00e8\3\b\3\b\3\b\3\t\3\t\3\t\6\t\u00f1\n\t")
        buf.write("\r\t\16\t\u00f2\3\t\3\t\3\t\5\t\u00f8\n\t\3\n\3\n\5\n")
        buf.write("\u00fc\n\n\3\13\3\13\3\13\3\13\3\13\3\f\6\f\u0104\n\f")
        buf.write("\r\f\16\f\u0105\3\f\3\f\5\f\u010a\n\f\7\f\u010c\n\f\f")
        buf.write("\f\16\f\u010f\13\f\3\r\3\r\3\r\3\r\3\r\3\16\3\16\3\17")
        buf.write("\3\17\3\20\3\20\3\20\3\20\3\20\3\21\3\21\3\21\6\21\u0122")
        buf.write("\n\21\r\21\16\21\u0123\3\21\3\21\3\22\3\22\3\22\3\22\3")
        buf.write("\22\3\23\3\23\3\24\7\24\u0130\n\24\f\24\16\24\u0133\13")
        buf.write("\24\3\24\7\24\u0136\n\24\f\24\16\24\u0139\13\24\3\24\6")
        buf.write("\24\u013c\n\24\r\24\16\24\u013d\3\24\7\24\u0141\n\24\f")
        buf.write("\24\16\24\u0144\13\24\5\24\u0146\n\24\3\25\6\25\u0149")
        buf.write("\n\25\r\25\16\25\u014a\3\25\3\25\3\25\3\26\3\26\3\26\3")
        buf.write("\26\3\26\3\27\3\27\3\27\3\27\5\27\u0159\n\27\3\30\3\30")
        buf.write("\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\31\3\31\3\32")
        buf.write("\3\32\3\32\3\32\5\32\u016b\n\32\5\32\u016d\n\32\3\32\3")
        buf.write("\32\3\32\3\32\5\32\u0173\n\32\5\32\u0175\n\32\3\32\3\32")
        buf.write("\3\32\7\32\u017a\n\32\f\32\16\32\u017d\13\32\3\32\5\32")
        buf.write("\u0180\n\32\3\33\3\33\3\34\3\34\3\34\3\34\7\34\u0188\n")
        buf.write("\34\f\34\16\34\u018b\13\34\3\34\3\34\3\34\3\34\7\34\u0191")
        buf.write("\n\34\f\34\16\34\u0194\13\34\3\34\3\34\3\34\3\34\3\34")
        buf.write("\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34")
        buf.write("\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34")
        buf.write("\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34")
        buf.write("\3\34\3\34\3\34\5\34\u01bf\n\34\3\35\3\35\3\35\3\35\3")
        buf.write("\35\3\35\3\36\3\36\3\36\7\36\u01ca\n\36\f\36\16\36\u01cd")
        buf.write("\13\36\3\36\3\36\3\37\3\37\5\37\u01d3\n\37\3 \3 \3 \3")
        buf.write(" \3 \3 \3 \3 \3 \3 \3!\3!\3!\3!\3!\3!\5!\u01e5\n!\3!\3")
        buf.write("!\3!\3!\5!\u01eb\n!\3\"\3\"\3\"\3\"\7\"\u01f1\n\"\f\"")
        buf.write("\16\"\u01f4\13\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\5")
        buf.write("\"\u01ff\n\"\3#\3#\3#\3#\5#\u0205\n#\3#\3#\3#\5#\u020a")
        buf.write("\n#\3$\3$\3$\3$\3$\3$\3$\3$\3$\3$\3$\3$\5$\u0218\n$\3")
        buf.write("%\3%\3&\3&\3\'\3\'\3\'\3\'\3\'\3\'\3(\3(\3(\3(\3(\3(\3")
        buf.write("(\3(\3(\3)\3)\3)\3)\5)\u0231\n)\5)\u0233\n)\3)\3)\3)\3")
        buf.write(")\5)\u0239\n)\5)\u023b\n)\3*\3*\3+\3+\3,\3,\3,\3,\3,\3")
        buf.write(",\3,\3,\3,\3,\3,\3,\3,\3,\5,\u024f\n,\3-\3-\3.\3.\3.\7")
        buf.write(".\u0256\n.\f.\16.\u0259\13.\3.\3.\3.\5.\u025e\n.\3/\3")
        buf.write("/\3/\7/\u0263\n/\f/\16/\u0266\13/\3/\3/\5/\u026a\n/\3")
        buf.write("\60\3\60\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61")
        buf.write("\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61")
        buf.write("\3\61\5\61\u0283\n\61\3\62\3\62\3\62\3\62\3\62\3\62\3")
        buf.write("\62\3\62\3\62\3\62\3\62\3\62\5\62\u0291\n\62\3\63\3\63")
        buf.write("\3\63\7\63\u0296\n\63\f\63\16\63\u0299\13\63\3\63\3\63")
        buf.write("\5\63\u029d\n\63\3\64\3\64\3\65\3\65\3\66\3\66\3\67\3")
        buf.write("\67\3\67\6\67\u02a8\n\67\r\67\16\67\u02a9\3\67\3\67\3")
        buf.write("\67\3\67\3\67\5\67\u02b1\n\67\38\38\38\38\38\38\38\38")
        buf.write("\38\38\38\38\58\u02bf\n8\39\39\3:\3:\5:\u02c5\n:\3;\3")
        buf.write(";\3;\7;\u02ca\n;\f;\16;\u02cd\13;\3;\3;\3;\3;\3;\3;\3")
        buf.write(";\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\5;\u02e5")
        buf.write("\n;\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3")
        buf.write("<\3<\5<\u02f9\n<\3=\3=\3=\3=\3=\3=\3>\3>\3>\3>\3>\3>\3")
        buf.write(">\5>\u0308\n>\3>\3>\3>\3>\5>\u030e\n>\3?\3?\3@\3@\3@\3")
        buf.write("@\3@\5@\u0317\n@\3@\5@\u031a\n@\3@\3@\3@\5@\u031f\n@\3")
        buf.write("@\5@\u0322\n@\3@\3@\3A\3A\3A\3A\3A\3B\3B\3B\3B\3B\3C\3")
        buf.write("C\3C\3C\3C\3D\3D\3D\7D\u0338\nD\fD\16D\u033b\13D\3D\3")
        buf.write("D\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E\3")
        buf.write("E\3E\5E\u0352\nE\3F\3F\3F\3F\3F\3F\5F\u035a\nF\3G\3G\3")
        buf.write("G\7G\u035f\nG\fG\16G\u0362\13G\3G\3G\3H\3H\3H\3H\3H\3")
        buf.write("I\3I\3I\3I\3I\3J\3J\3J\7J\u0373\nJ\fJ\16J\u0376\13J\3")
        buf.write("J\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\5J\u0384\nJ\3J\3J\3")
        buf.write("J\3J\5J\u038a\nJ\3K\3K\3K\3K\3K\3K\3L\3L\3M\3M\3M\3M\3")
        buf.write("M\3M\3M\3M\3M\3M\6M\u039e\nM\rM\16M\u039f\3M\3M\3M\3M")
        buf.write("\3M\3M\3M\3M\3M\3M\3M\7M\u03ad\nM\fM\16M\u03b0\13M\3M")
        buf.write("\3M\3M\3M\3M\3M\3M\3M\3M\5M\u03bb\nM\3N\3N\3N\7N\u03c0")
        buf.write("\nN\fN\16N\u03c3\13N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N")
        buf.write("\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3")
        buf.write("N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3")
        buf.write("N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3")
        buf.write("N\3N\3N\3N\5N\u0409\nN\3O\3O\3O\2\2P\2\4\6\b\n\f\16\20")
        buf.write("\22\24\26\30\32\34\36 \"$&(*,.\60\62\64\668:<>@BDFHJL")
        buf.write("NPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088")
        buf.write("\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a")
        buf.write("\u009c\2\13\3\2$%\4\2\t\t-/\3\2\60\64\3\2\659\3\2\62\64")
        buf.write("\3\289\3\2AB\4\2--//\4\2\"#OO\2\u043d\2\u00a0\3\2\2\2")
        buf.write("\4\u00a2\3\2\2\2\6\u00bf\3\2\2\2\b\u00c4\3\2\2\2\n\u00cd")
        buf.write("\3\2\2\2\f\u00e3\3\2\2\2\16\u00e6\3\2\2\2\20\u00f7\3\2")
        buf.write("\2\2\22\u00fb\3\2\2\2\24\u00fd\3\2\2\2\26\u010d\3\2\2")
        buf.write("\2\30\u0110\3\2\2\2\32\u0115\3\2\2\2\34\u0117\3\2\2\2")
        buf.write("\36\u0119\3\2\2\2 \u011e\3\2\2\2\"\u0127\3\2\2\2$\u012c")
        buf.write("\3\2\2\2&\u0145\3\2\2\2(\u0148\3\2\2\2*\u014f\3\2\2\2")
        buf.write(",\u0158\3\2\2\2.\u015a\3\2\2\2\60\u0164\3\2\2\2\62\u016c")
        buf.write("\3\2\2\2\64\u0181\3\2\2\2\66\u01be\3\2\2\28\u01c0\3\2")
        buf.write("\2\2:\u01c6\3\2\2\2<\u01d2\3\2\2\2>\u01d4\3\2\2\2@\u01de")
        buf.write("\3\2\2\2B\u01fe\3\2\2\2D\u0209\3\2\2\2F\u0217\3\2\2\2")
        buf.write("H\u0219\3\2\2\2J\u021b\3\2\2\2L\u021d\3\2\2\2N\u0223\3")
        buf.write("\2\2\2P\u0232\3\2\2\2R\u023c\3\2\2\2T\u023e\3\2\2\2V\u024e")
        buf.write("\3\2\2\2X\u0250\3\2\2\2Z\u025d\3\2\2\2\\\u0269\3\2\2\2")
        buf.write("^\u026b\3\2\2\2`\u0282\3\2\2\2b\u0290\3\2\2\2d\u029c\3")
        buf.write("\2\2\2f\u029e\3\2\2\2h\u02a0\3\2\2\2j\u02a2\3\2\2\2l\u02b0")
        buf.write("\3\2\2\2n\u02be\3\2\2\2p\u02c0\3\2\2\2r\u02c4\3\2\2\2")
        buf.write("t\u02e4\3\2\2\2v\u02f8\3\2\2\2x\u02fa\3\2\2\2z\u030d\3")
        buf.write("\2\2\2|\u030f\3\2\2\2~\u0311\3\2\2\2\u0080\u0325\3\2\2")
        buf.write("\2\u0082\u032a\3\2\2\2\u0084\u032f\3\2\2\2\u0086\u0334")
        buf.write("\3\2\2\2\u0088\u0351\3\2\2\2\u008a\u0359\3\2\2\2\u008c")
        buf.write("\u035b\3\2\2\2\u008e\u0365\3\2\2\2\u0090\u036a\3\2\2\2")
        buf.write("\u0092\u0389\3\2\2\2\u0094\u038b\3\2\2\2\u0096\u0391\3")
        buf.write("\2\2\2\u0098\u03ba\3\2\2\2\u009a\u0408\3\2\2\2\u009c\u040a")
        buf.write("\3\2\2\2\u009e\u00a1\5\4\3\2\u009f\u00a1\5~@\2\u00a0\u009e")
        buf.write("\3\2\2\2\u00a0\u009f\3\2\2\2\u00a1\3\3\2\2\2\u00a2\u00a3")
        buf.write("\7\3\2\2\u00a3\u00a4\7\4\2\2\u00a4\u00a6\5\6\4\2\u00a5")
        buf.write("\u00a7\5\b\5\2\u00a6\u00a5\3\2\2\2\u00a6\u00a7\3\2\2\2")
        buf.write("\u00a7\u00a9\3\2\2\2\u00a8\u00aa\5\n\6\2\u00a9\u00a8\3")
        buf.write("\2\2\2\u00a9\u00aa\3\2\2\2\u00aa\u00ac\3\2\2\2\u00ab\u00ad")
        buf.write("\5\36\20\2\u00ac\u00ab\3\2\2\2\u00ac\u00ad\3\2\2\2\u00ad")
        buf.write("\u00af\3\2\2\2\u00ae\u00b0\5 \21\2\u00af\u00ae\3\2\2\2")
        buf.write("\u00af\u00b0\3\2\2\2\u00b0\u00b2\3\2\2\2\u00b1\u00b3\5")
        buf.write("\24\13\2\u00b2\u00b1\3\2\2\2\u00b2\u00b3\3\2\2\2\u00b3")
        buf.write("\u00b5\3\2\2\2\u00b4\u00b6\5*\26\2\u00b5\u00b4\3\2\2\2")
        buf.write("\u00b5\u00b6\3\2\2\2\u00b6\u00ba\3\2\2\2\u00b7\u00b9\5")
        buf.write(",\27\2\u00b8\u00b7\3\2\2\2\u00b9\u00bc\3\2\2\2\u00ba\u00b8")
        buf.write("\3\2\2\2\u00ba\u00bb\3\2\2\2\u00bb\u00bd\3\2\2\2\u00bc")
        buf.write("\u00ba\3\2\2\2\u00bd\u00be\7\5\2\2\u00be\5\3\2\2\2\u00bf")
        buf.write("\u00c0\7\3\2\2\u00c0\u00c1\7\6\2\2\u00c1\u00c2\5\u009c")
        buf.write("O\2\u00c2\u00c3\7\5\2\2\u00c3\7\3\2\2\2\u00c4\u00c5\7")
        buf.write("\3\2\2\u00c5\u00c7\7\7\2\2\u00c6\u00c8\7N\2\2\u00c7\u00c6")
        buf.write("\3\2\2\2\u00c8\u00c9\3\2\2\2\u00c9\u00c7\3\2\2\2\u00c9")
        buf.write("\u00ca\3\2\2\2\u00ca\u00cb\3\2\2\2\u00cb\u00cc\7\5\2\2")
        buf.write("\u00cc\t\3\2\2\2\u00cd\u00ce\7\3\2\2\u00ce\u00cf\7\b\2")
        buf.write("\2\u00cf\u00d0\5\f\7\2\u00d0\u00d1\7\5\2\2\u00d1\13\3")
        buf.write("\2\2\2\u00d2\u00d4\5\u009cO\2\u00d3\u00d2\3\2\2\2\u00d4")
        buf.write("\u00d7\3\2\2\2\u00d5\u00d3\3\2\2\2\u00d5\u00d6\3\2\2\2")
        buf.write("\u00d6\u00e4\3\2\2\2\u00d7\u00d5\3\2\2\2\u00d8\u00da\5")
        buf.write("\16\b\2\u00d9\u00d8\3\2\2\2\u00da\u00db\3\2\2\2\u00db")
        buf.write("\u00d9\3\2\2\2\u00db\u00dc\3\2\2\2\u00dc\u00e0\3\2\2\2")
        buf.write("\u00dd\u00df\5\u009cO\2\u00de\u00dd\3\2\2\2\u00df\u00e2")
        buf.write("\3\2\2\2\u00e0\u00de\3\2\2\2\u00e0\u00e1\3\2\2\2\u00e1")
        buf.write("\u00e4\3\2\2\2\u00e2\u00e0\3\2\2\2\u00e3\u00d5\3\2\2\2")
        buf.write("\u00e3\u00d9\3\2\2\2\u00e4\r\3\2\2\2\u00e5\u00e7\5\u009c")
        buf.write("O\2\u00e6\u00e5\3\2\2\2\u00e7\u00e8\3\2\2\2\u00e8\u00e6")
        buf.write("\3\2\2\2\u00e8\u00e9\3\2\2\2\u00e9\u00ea\3\2\2\2\u00ea")
        buf.write("\u00eb\7\t\2\2\u00eb\u00ec\5\20\t\2\u00ec\17\3\2\2\2\u00ed")
        buf.write("\u00ee\7\3\2\2\u00ee\u00f0\7\n\2\2\u00ef\u00f1\5\22\n")
        buf.write("\2\u00f0\u00ef\3\2\2\2\u00f1\u00f2\3\2\2\2\u00f2\u00f0")
        buf.write("\3\2\2\2\u00f2\u00f3\3\2\2\2\u00f3\u00f4\3\2\2\2\u00f4")
        buf.write("\u00f5\7\5\2\2\u00f5\u00f8\3\2\2\2\u00f6\u00f8\5\22\n")
        buf.write("\2\u00f7\u00ed\3\2\2\2\u00f7\u00f6\3\2\2\2\u00f8\21\3")
        buf.write("\2\2\2\u00f9\u00fc\5\u009cO\2\u00fa\u00fc\7\13\2\2\u00fb")
        buf.write("\u00f9\3\2\2\2\u00fb\u00fa\3\2\2\2\u00fc\23\3\2\2\2\u00fd")
        buf.write("\u00fe\7\3\2\2\u00fe\u00ff\7\f\2\2\u00ff\u0100\5\26\f")
        buf.write("\2\u0100\u0101\7\5\2\2\u0101\25\3\2\2\2\u0102\u0104\5")
        buf.write("\30\r\2\u0103\u0102\3\2\2\2\u0104\u0105\3\2\2\2\u0105")
        buf.write("\u0103\3\2\2\2\u0105\u0106\3\2\2\2\u0106\u0109\3\2\2\2")
        buf.write("\u0107\u0108\7\t\2\2\u0108\u010a\5\34\17\2\u0109\u0107")
        buf.write("\3\2\2\2\u0109\u010a\3\2\2\2\u010a\u010c\3\2\2\2\u010b")
        buf.write("\u0103\3\2\2\2\u010c\u010f\3\2\2\2\u010d\u010b\3\2\2\2")
        buf.write("\u010d\u010e\3\2\2\2\u010e\27\3\2\2\2\u010f\u010d\3\2")
        buf.write("\2\2\u0110\u0111\7\3\2\2\u0111\u0112\5\32\16\2\u0112\u0113")
        buf.write("\5&\24\2\u0113\u0114\7\5\2\2\u0114\31\3\2\2\2\u0115\u0116")
        buf.write("\5\u009cO\2\u0116\33\3\2\2\2\u0117\u0118\7\r\2\2\u0118")
        buf.write("\35\3\2\2\2\u0119\u011a\7\3\2\2\u011a\u011b\7\16\2\2\u011b")
        buf.write("\u011c\5\f\7\2\u011c\u011d\7\5\2\2\u011d\37\3\2\2\2\u011e")
        buf.write("\u011f\7\3\2\2\u011f\u0121\7\17\2\2\u0120\u0122\5\"\22")
        buf.write("\2\u0121\u0120\3\2\2\2\u0122\u0123\3\2\2\2\u0123\u0121")
        buf.write("\3\2\2\2\u0123\u0124\3\2\2\2\u0124\u0125\3\2\2\2\u0125")
        buf.write("\u0126\7\5\2\2\u0126!\3\2\2\2\u0127\u0128\7\3\2\2\u0128")
        buf.write("\u0129\5$\23\2\u0129\u012a\5&\24\2\u012a\u012b\7\5\2\2")
        buf.write("\u012b#\3\2\2\2\u012c\u012d\5\u009cO\2\u012d%\3\2\2\2")
        buf.write("\u012e\u0130\7O\2\2\u012f\u012e\3\2\2\2\u0130\u0133\3")
        buf.write("\2\2\2\u0131\u012f\3\2\2\2\u0131\u0132\3\2\2\2\u0132\u0137")
        buf.write("\3\2\2\2\u0133\u0131\3\2\2\2\u0134\u0136\7P\2\2\u0135")
        buf.write("\u0134\3\2\2\2\u0136\u0139\3\2\2\2\u0137\u0135\3\2\2\2")
        buf.write("\u0137\u0138\3\2\2\2\u0138\u0146\3\2\2\2\u0139\u0137\3")
        buf.write("\2\2\2\u013a\u013c\5(\25\2\u013b\u013a\3\2\2\2\u013c\u013d")
        buf.write("\3\2\2\2\u013d\u013b\3\2\2\2\u013d\u013e\3\2\2\2\u013e")
        buf.write("\u0142\3\2\2\2\u013f\u0141\7P\2\2\u0140\u013f\3\2\2\2")
        buf.write("\u0141\u0144\3\2\2\2\u0142\u0140\3\2\2\2\u0142\u0143\3")
        buf.write("\2\2\2\u0143\u0146\3\2\2\2\u0144\u0142\3\2\2\2\u0145\u0131")
        buf.write("\3\2\2\2\u0145\u013b\3\2\2\2\u0146\'\3\2\2\2\u0147\u0149")
        buf.write("\7P\2\2\u0148\u0147\3\2\2\2\u0149\u014a\3\2\2\2\u014a")
        buf.write("\u0148\3\2\2\2\u014a\u014b\3\2\2\2\u014b\u014c\3\2\2\2")
        buf.write("\u014c\u014d\7\t\2\2\u014d\u014e\5\20\t\2\u014e)\3\2\2")
        buf.write("\2\u014f\u0150\7\3\2\2\u0150\u0151\7\20\2\2\u0151\u0152")
        buf.write("\5\u009aN\2\u0152\u0153\7\5\2\2\u0153+\3\2\2\2\u0154\u0159")
        buf.write("\5.\30\2\u0155\u0159\5> \2\u0156\u0159\5L\'\2\u0157\u0159")
        buf.write("\5N(\2\u0158\u0154\3\2\2\2\u0158\u0155\3\2\2\2\u0158\u0156")
        buf.write("\3\2\2\2\u0158\u0157\3\2\2\2\u0159-\3\2\2\2\u015a\u015b")
        buf.write("\7\3\2\2\u015b\u015c\7\21\2\2\u015c\u015d\5\60\31\2\u015d")
        buf.write("\u015e\7\22\2\2\u015e\u015f\7\3\2\2\u015f\u0160\5&\24")
        buf.write("\2\u0160\u0161\7\5\2\2\u0161\u0162\5\62\32\2\u0162\u0163")
        buf.write("\7\5\2\2\u0163/\3\2\2\2\u0164\u0165\5\u009cO\2\u0165\61")
        buf.write("\3\2\2\2\u0166\u016a\7\23\2\2\u0167\u0168\7\3\2\2\u0168")
        buf.write("\u016b\7\5\2\2\u0169\u016b\5\64\33\2\u016a\u0167\3\2\2")
        buf.write("\2\u016a\u0169\3\2\2\2\u016b\u016d\3\2\2\2\u016c\u0166")
        buf.write("\3\2\2\2\u016c\u016d\3\2\2\2\u016d\u0174\3\2\2\2\u016e")
        buf.write("\u0172\7\24\2\2\u016f\u0170\7\3\2\2\u0170\u0173\7\5\2")
        buf.write("\2\u0171\u0173\5\\/\2\u0172\u016f\3\2\2\2\u0172\u0171")
        buf.write("\3\2\2\2\u0173\u0175\3\2\2\2\u0174\u016e\3\2\2\2\u0174")
        buf.write("\u0175\3\2\2\2\u0175\u017f\3\2\2\2\u0176\u0177\7\25\2")
        buf.write("\2\u0177\u017b\7\3\2\2\u0178\u017a\7P\2\2\u0179\u0178")
        buf.write("\3\2\2\2\u017a\u017d\3\2\2\2\u017b\u0179\3\2\2\2\u017b")
        buf.write("\u017c\3\2\2\2\u017c\u017e\3\2\2\2\u017d\u017b\3\2\2\2")
        buf.write("\u017e\u0180\7\5\2\2\u017f\u0176\3\2\2\2\u017f\u0180\3")
        buf.write("\2\2\2\u0180\63\3\2\2\2\u0181\u0182\5\66\34\2\u0182\65")
        buf.write("\3\2\2\2\u0183\u01bf\5:\36\2\u0184\u0185\7\3\2\2\u0185")
        buf.write("\u0189\7\26\2\2\u0186\u0188\5\66\34\2\u0187\u0186\3\2")
        buf.write("\2\2\u0188\u018b\3\2\2\2\u0189\u0187\3\2\2\2\u0189\u018a")
        buf.write("\3\2\2\2\u018a\u018c\3\2\2\2\u018b\u0189\3\2\2\2\u018c")
        buf.write("\u01bf\7\5\2\2\u018d\u018e\7\3\2\2\u018e\u0192\7\27\2")
        buf.write("\2\u018f\u0191\5\66\34\2\u0190\u018f\3\2\2\2\u0191\u0194")
        buf.write("\3\2\2\2\u0192\u0190\3\2\2\2\u0192\u0193\3\2\2\2\u0193")
        buf.write("\u0195\3\2\2\2\u0194\u0192\3\2\2\2\u0195\u01bf\7\5\2\2")
        buf.write("\u0196\u0197\7\3\2\2\u0197\u0198\7\30\2\2\u0198\u0199")
        buf.write("\5\66\34\2\u0199\u019a\7\5\2\2\u019a\u01bf\3\2\2\2\u019b")
        buf.write("\u019c\7\3\2\2\u019c\u019d\7\31\2\2\u019d\u019e\5\66\34")
        buf.write("\2\u019e\u019f\5\66\34\2\u019f\u01a0\7\5\2\2\u01a0\u01bf")
        buf.write("\3\2\2\2\u01a1\u01a2\7\3\2\2\u01a2\u01a3\7\32\2\2\u01a3")
        buf.write("\u01a4\7\3\2\2\u01a4\u01a5\5&\24\2\u01a5\u01a6\7\5\2\2")
        buf.write("\u01a6\u01a7\5\66\34\2\u01a7\u01a8\7\5\2\2\u01a8\u01bf")
        buf.write("\3\2\2\2\u01a9\u01aa\7\3\2\2\u01aa\u01ab\7\33\2\2\u01ab")
        buf.write("\u01ac\7\3\2\2\u01ac\u01ad\5&\24\2\u01ad\u01ae\7\5\2\2")
        buf.write("\u01ae\u01af\5\66\34\2\u01af\u01b0\7\5\2\2\u01b0\u01bf")
        buf.write("\3\2\2\2\u01b1\u01b2\7\3\2\2\u01b2\u01b3\7\34\2\2\u01b3")
        buf.write("\u01b4\7P\2\2\u01b4\u01b5\5\66\34\2\u01b5\u01b6\7\5\2")
        buf.write("\2\u01b6\u01bf\3\2\2\2\u01b7\u01b8\7\3\2\2\u01b8\u01b9")
        buf.write("\7\35\2\2\u01b9\u01ba\7P\2\2\u01ba\u01bb\7P\2\2\u01bb")
        buf.write("\u01bc\7P\2\2\u01bc\u01bf\7\5\2\2\u01bd\u01bf\58\35\2")
        buf.write("\u01be\u0183\3\2\2\2\u01be\u0184\3\2\2\2\u01be\u018d\3")
        buf.write("\2\2\2\u01be\u0196\3\2\2\2\u01be\u019b\3\2\2\2\u01be\u01a1")
        buf.write("\3\2\2\2\u01be\u01a9\3\2\2\2\u01be\u01b1\3\2\2\2\u01be")
        buf.write("\u01b7\3\2\2\2\u01be\u01bd\3\2\2\2\u01bf\67\3\2\2\2\u01c0")
        buf.write("\u01c1\7\3\2\2\u01c1\u01c2\5h\65\2\u01c2\u01c3\5V,\2\u01c3")
        buf.write("\u01c4\5V,\2\u01c4\u01c5\7\5\2\2\u01c59\3\2\2\2\u01c6")
        buf.write("\u01c7\7\3\2\2\u01c7\u01cb\5$\23\2\u01c8\u01ca\5<\37\2")
        buf.write("\u01c9\u01c8\3\2\2\2\u01ca\u01cd\3\2\2\2\u01cb\u01c9\3")
        buf.write("\2\2\2\u01cb\u01cc\3\2\2\2\u01cc\u01ce\3\2\2\2\u01cd\u01cb")
        buf.write("\3\2\2\2\u01ce\u01cf\7\5\2\2\u01cf;\3\2\2\2\u01d0\u01d3")
        buf.write("\5\u009cO\2\u01d1\u01d3\7P\2\2\u01d2\u01d0\3\2\2\2\u01d2")
        buf.write("\u01d1\3\2\2\2\u01d3=\3\2\2\2\u01d4\u01d5\7\3\2\2\u01d5")
        buf.write("\u01d6\7\36\2\2\u01d6\u01d7\5\60\31\2\u01d7\u01d8\7\22")
        buf.write("\2\2\u01d8\u01d9\7\3\2\2\u01d9\u01da\5&\24\2\u01da\u01db")
        buf.write("\7\5\2\2\u01db\u01dc\5@!\2\u01dc\u01dd\7\5\2\2\u01dd?")
        buf.write("\3\2\2\2\u01de\u01df\7\37\2\2\u01df\u01e0\5l\67\2\u01e0")
        buf.write("\u01e4\7 \2\2\u01e1\u01e2\7\3\2\2\u01e2\u01e5\7\5\2\2")
        buf.write("\u01e3\u01e5\5B\"\2\u01e4\u01e1\3\2\2\2\u01e4\u01e3\3")
        buf.write("\2\2\2\u01e5\u01e6\3\2\2\2\u01e6\u01ea\7\24\2\2\u01e7")
        buf.write("\u01e8\7\3\2\2\u01e8\u01eb\7\5\2\2\u01e9\u01eb\5t;\2\u01ea")
        buf.write("\u01e7\3\2\2\2\u01ea\u01e9\3\2\2\2\u01ebA\3\2\2\2\u01ec")
        buf.write("\u01ff\5D#\2\u01ed\u01ee\7\3\2\2\u01ee\u01f2\7\26\2\2")
        buf.write("\u01ef\u01f1\5B\"\2\u01f0\u01ef\3\2\2\2\u01f1\u01f4\3")
        buf.write("\2\2\2\u01f2\u01f0\3\2\2\2\u01f2\u01f3\3\2\2\2\u01f3\u01f5")
        buf.write("\3\2\2\2\u01f4\u01f2\3\2\2\2\u01f5\u01ff\7\5\2\2\u01f6")
        buf.write("\u01f7\7\3\2\2\u01f7\u01f8\7\33\2\2\u01f8\u01f9\7\3\2")
        buf.write("\2\u01f9\u01fa\5&\24\2\u01fa\u01fb\7\5\2\2\u01fb\u01fc")
        buf.write("\5B\"\2\u01fc\u01fd\7\5\2\2\u01fd\u01ff\3\2\2\2\u01fe")
        buf.write("\u01ec\3\2\2\2\u01fe\u01ed\3\2\2\2\u01fe\u01f6\3\2\2\2")
        buf.write("\u01ffC\3\2\2\2\u0200\u020a\5F$\2\u0201\u0202\7\3\2\2")
        buf.write("\u0202\u0204\7!\2\2\u0203\u0205\5\u009cO\2\u0204\u0203")
        buf.write("\3\2\2\2\u0204\u0205\3\2\2\2\u0205\u0206\3\2\2\2\u0206")
        buf.write("\u0207\5F$\2\u0207\u0208\7\5\2\2\u0208\u020a\3\2\2\2\u0209")
        buf.write("\u0200\3\2\2\2\u0209\u0201\3\2\2\2\u020aE\3\2\2\2\u020b")
        buf.write("\u020c\7\3\2\2\u020c\u020d\7\"\2\2\u020d\u020e\5H%\2\u020e")
        buf.write("\u020f\5\66\34\2\u020f\u0210\7\5\2\2\u0210\u0218\3\2\2")
        buf.write("\2\u0211\u0212\7\3\2\2\u0212\u0213\7#\2\2\u0213\u0214")
        buf.write("\5J&\2\u0214\u0215\5\66\34\2\u0215\u0216\7\5\2\2\u0216")
        buf.write("\u0218\3\2\2\2\u0217\u020b\3\2\2\2\u0217\u0211\3\2\2\2")
        buf.write("\u0218G\3\2\2\2\u0219\u021a\t\2\2\2\u021aI\3\2\2\2\u021b")
        buf.write("\u021c\7&\2\2\u021cK\3\2\2\2\u021d\u021e\7\3\2\2\u021e")
        buf.write("\u021f\7\'\2\2\u021f\u0220\5&\24\2\u0220\u0221\5\66\34")
        buf.write("\2\u0221\u0222\7\5\2\2\u0222M\3\2\2\2\u0223\u0224\7\3")
        buf.write("\2\2\u0224\u0225\7(\2\2\u0225\u0226\7)\2\2\u0226\u0227")
        buf.write("\7\3\2\2\u0227\u0228\5&\24\2\u0228\u0229\7\5\2\2\u0229")
        buf.write("\u022a\5P)\2\u022a\u022b\7\5\2\2\u022bO\3\2\2\2\u022c")
        buf.write("\u0230\7*\2\2\u022d\u022e\7\3\2\2\u022e\u0231\7\5\2\2")
        buf.write("\u022f\u0231\5R*\2\u0230\u022d\3\2\2\2\u0230\u022f\3\2")
        buf.write("\2\2\u0231\u0233\3\2\2\2\u0232\u022c\3\2\2\2\u0232\u0233")
        buf.write("\3\2\2\2\u0233\u023a\3\2\2\2\u0234\u0238\7+\2\2\u0235")
        buf.write("\u0236\7\3\2\2\u0236\u0239\7\5\2\2\u0237\u0239\5T+\2\u0238")
        buf.write("\u0235\3\2\2\2\u0238\u0237\3\2\2\2\u0239\u023b\3\2\2\2")
        buf.write("\u023a\u0234\3\2\2\2\u023a\u023b\3\2\2\2\u023bQ\3\2\2")
        buf.write("\2\u023c\u023d\5\64\33\2\u023dS\3\2\2\2\u023e\u023f\5")
        buf.write("\\/\2\u023fU\3\2\2\2\u0240\u024f\7Q\2\2\u0241\u024f\7")
        buf.write("P\2\2\u0242\u0243\7\3\2\2\u0243\u0244\5f\64\2\u0244\u0245")
        buf.write("\5V,\2\u0245\u0246\5X-\2\u0246\u0247\7\5\2\2\u0247\u024f")
        buf.write("\3\2\2\2\u0248\u0249\7\3\2\2\u0249\u024a\7\t\2\2\u024a")
        buf.write("\u024b\5V,\2\u024b\u024c\7\5\2\2\u024c\u024f\3\2\2\2\u024d")
        buf.write("\u024f\5Z.\2\u024e\u0240\3\2\2\2\u024e\u0241\3\2\2\2\u024e")
        buf.write("\u0242\3\2\2\2\u024e\u0248\3\2\2\2\u024e\u024d\3\2\2\2")
        buf.write("\u024fW\3\2\2\2\u0250\u0251\5V,\2\u0251Y\3\2\2\2\u0252")
        buf.write("\u0253\7\3\2\2\u0253\u0257\5\32\16\2\u0254\u0256\5<\37")
        buf.write("\2\u0255\u0254\3\2\2\2\u0256\u0259\3\2\2\2\u0257\u0255")
        buf.write("\3\2\2\2\u0257\u0258\3\2\2\2\u0258\u025a\3\2\2\2\u0259")
        buf.write("\u0257\3\2\2\2\u025a\u025b\7\5\2\2\u025b\u025e\3\2\2\2")
        buf.write("\u025c\u025e\5\32\16\2\u025d\u0252\3\2\2\2\u025d\u025c")
        buf.write("\3\2\2\2\u025e[\3\2\2\2\u025f\u0260\7\3\2\2\u0260\u0264")
        buf.write("\7\26\2\2\u0261\u0263\5`\61\2\u0262\u0261\3\2\2\2\u0263")
        buf.write("\u0266\3\2\2\2\u0264\u0262\3\2\2\2\u0264\u0265\3\2\2\2")
        buf.write("\u0265\u0267\3\2\2\2\u0266\u0264\3\2\2\2\u0267\u026a\7")
        buf.write("\5\2\2\u0268\u026a\5`\61\2\u0269\u025f\3\2\2\2\u0269\u0268")
        buf.write("\3\2\2\2\u026a]\3\2\2\2\u026b\u026c\5&\24\2\u026c_\3\2")
        buf.write("\2\2\u026d\u026e\7\3\2\2\u026e\u026f\7\33\2\2\u026f\u0270")
        buf.write("\7\3\2\2\u0270\u0271\5&\24\2\u0271\u0272\7\5\2\2\u0272")
        buf.write("\u0273\5\\/\2\u0273\u0274\7\5\2\2\u0274\u0283\3\2\2\2")
        buf.write("\u0275\u0276\7\3\2\2\u0276\u0277\7,\2\2\u0277\u0278\5")
        buf.write("\66\34\2\u0278\u0279\5d\63\2\u0279\u027a\7\5\2\2\u027a")
        buf.write("\u0283\3\2\2\2\u027b\u027c\7\3\2\2\u027c\u027d\7\34\2")
        buf.write("\2\u027d\u027e\7P\2\2\u027e\u027f\5d\63\2\u027f\u0280")
        buf.write("\7\5\2\2\u0280\u0283\3\2\2\2\u0281\u0283\5b\62\2\u0282")
        buf.write("\u026d\3\2\2\2\u0282\u0275\3\2\2\2\u0282\u027b\3\2\2\2")
        buf.write("\u0282\u0281\3\2\2\2\u0283a\3\2\2\2\u0284\u0285\7\3\2")
        buf.write("\2\u0285\u0286\5j\66\2\u0286\u0287\5Z.\2\u0287\u0288\5")
        buf.write("V,\2\u0288\u0289\7\5\2\2\u0289\u0291\3\2\2\2\u028a\u028b")
        buf.write("\7\3\2\2\u028b\u028c\7\30\2\2\u028c\u028d\5:\36\2\u028d")
        buf.write("\u028e\7\5\2\2\u028e\u0291\3\2\2\2\u028f\u0291\5:\36\2")
        buf.write("\u0290\u0284\3\2\2\2\u0290\u028a\3\2\2\2\u0290\u028f\3")
        buf.write("\2\2\2\u0291c\3\2\2\2\u0292\u0293\7\3\2\2\u0293\u0297")
        buf.write("\7\26\2\2\u0294\u0296\5b\62\2\u0295\u0294\3\2\2\2\u0296")
        buf.write("\u0299\3\2\2\2\u0297\u0295\3\2\2\2\u0297\u0298\3\2\2\2")
        buf.write("\u0298\u029a\3\2\2\2\u0299\u0297\3\2\2\2\u029a\u029d\7")
        buf.write("\5\2\2\u029b\u029d\5b\62\2\u029c\u0292\3\2\2\2\u029c\u029b")
        buf.write("\3\2\2\2\u029de\3\2\2\2\u029e\u029f\t\3\2\2\u029fg\3\2")
        buf.write("\2\2\u02a0\u02a1\t\4\2\2\u02a1i\3\2\2\2\u02a2\u02a3\t")
        buf.write("\5\2\2\u02a3k\3\2\2\2\u02a4\u02a5\7\3\2\2\u02a5\u02a7")
        buf.write("\7\26\2\2\u02a6\u02a8\5n8\2\u02a7\u02a6\3\2\2\2\u02a8")
        buf.write("\u02a9\3\2\2\2\u02a9\u02a7\3\2\2\2\u02a9\u02aa\3\2\2\2")
        buf.write("\u02aa\u02ab\3\2\2\2\u02ab\u02ac\7\5\2\2\u02ac\u02b1\3")
        buf.write("\2\2\2\u02ad\u02ae\7\3\2\2\u02ae\u02b1\7\5\2\2\u02af\u02b1")
        buf.write("\5n8\2\u02b0\u02a4\3\2\2\2\u02b0\u02ad\3\2\2\2\u02b0\u02af")
        buf.write("\3\2\2\2\u02b1m\3\2\2\2\u02b2\u02b3\7\3\2\2\u02b3\u02b4")
        buf.write("\5p9\2\u02b4\u02b5\7:\2\2\u02b5\u02b6\5r:\2\u02b6\u02b7")
        buf.write("\7\5\2\2\u02b7\u02bf\3\2\2\2\u02b8\u02b9\7\3\2\2\u02b9")
        buf.write("\u02ba\7\"\2\2\u02ba\u02bb\5H%\2\u02bb\u02bc\5n8\2\u02bc")
        buf.write("\u02bd\7\5\2\2\u02bd\u02bf\3\2\2\2\u02be\u02b2\3\2\2\2")
        buf.write("\u02be\u02b8\3\2\2\2\u02bfo\3\2\2\2\u02c0\u02c1\t\6\2")
        buf.write("\2\u02c1q\3\2\2\2\u02c2\u02c5\7Q\2\2\u02c3\u02c5\5V,\2")
        buf.write("\u02c4\u02c2\3\2\2\2\u02c4\u02c3\3\2\2\2\u02c5s\3\2\2")
        buf.write("\2\u02c6\u02c7\7\3\2\2\u02c7\u02cb\7\26\2\2\u02c8\u02ca")
        buf.write("\5t;\2\u02c9\u02c8\3\2\2\2\u02ca\u02cd\3\2\2\2\u02cb\u02c9")
        buf.write("\3\2\2\2\u02cb\u02cc\3\2\2\2\u02cc\u02ce\3\2\2\2\u02cd")
        buf.write("\u02cb\3\2\2\2\u02ce\u02e5\7\5\2\2\u02cf\u02e5\5v<\2\u02d0")
        buf.write("\u02d1\7\3\2\2\u02d1\u02d2\7\33\2\2\u02d2\u02d3\7\3\2")
        buf.write("\2\u02d3\u02d4\5&\24\2\u02d4\u02d5\7\5\2\2\u02d5\u02d6")
        buf.write("\5t;\2\u02d6\u02d7\7\5\2\2\u02d7\u02e5\3\2\2\2\u02d8\u02d9")
        buf.write("\7\3\2\2\u02d9\u02da\7,\2\2\u02da\u02db\5B\"\2\u02db\u02dc")
        buf.write("\5v<\2\u02dc\u02dd\7\5\2\2\u02dd\u02e5\3\2\2\2\u02de\u02df")
        buf.write("\7\3\2\2\u02df\u02e0\5j\66\2\u02e0\u02e1\5Z.\2\u02e1\u02e2")
        buf.write("\5z>\2\u02e2\u02e3\7\5\2\2\u02e3\u02e5\3\2\2\2\u02e4\u02c6")
        buf.write("\3\2\2\2\u02e4\u02cf\3\2\2\2\u02e4\u02d0\3\2\2\2\u02e4")
        buf.write("\u02d8\3\2\2\2\u02e4\u02de\3\2\2\2\u02e5u\3\2\2\2\u02e6")
        buf.write("\u02e7\7\3\2\2\u02e7\u02e8\7\"\2\2\u02e8\u02e9\5H%\2\u02e9")
        buf.write("\u02ea\5`\61\2\u02ea\u02eb\7\5\2\2\u02eb\u02f9\3\2\2\2")
        buf.write("\u02ec\u02ed\7\3\2\2\u02ed\u02ee\7\"\2\2\u02ee\u02ef\5")
        buf.write("H%\2\u02ef\u02f0\5x=\2\u02f0\u02f1\7\5\2\2\u02f1\u02f9")
        buf.write("\3\2\2\2\u02f2\u02f3\7\3\2\2\u02f3\u02f4\5|?\2\u02f4\u02f5")
        buf.write("\5Z.\2\u02f5\u02f6\5V,\2\u02f6\u02f7\7\5\2\2\u02f7\u02f9")
        buf.write("\3\2\2\2\u02f8\u02e6\3\2\2\2\u02f8\u02ec\3\2\2\2\u02f8")
        buf.write("\u02f2\3\2\2\2\u02f9w\3\2\2\2\u02fa\u02fb\7\3\2\2\u02fb")
        buf.write("\u02fc\5j\66\2\u02fc\u02fd\5Z.\2\u02fd\u02fe\5z>\2\u02fe")
        buf.write("\u02ff\7\5\2\2\u02ffy\3\2\2\2\u0300\u0307\7\3\2\2\u0301")
        buf.write("\u0302\5f\64\2\u0302\u0303\5z>\2\u0303\u0304\5z>\2\u0304")
        buf.write("\u0308\3\2\2\2\u0305\u0306\7\t\2\2\u0306\u0308\5z>\2\u0307")
        buf.write("\u0301\3\2\2\2\u0307\u0305\3\2\2\2\u0308\u0309\3\2\2\2")
        buf.write("\u0309\u030a\7\5\2\2\u030a\u030e\3\2\2\2\u030b\u030e\7")
        buf.write(":\2\2\u030c\u030e\5V,\2\u030d\u0300\3\2\2\2\u030d\u030b")
        buf.write("\3\2\2\2\u030d\u030c\3\2\2\2\u030e{\3\2\2\2\u030f\u0310")
        buf.write("\t\7\2\2\u0310}\3\2\2\2\u0311\u0312\7\3\2\2\u0312\u0313")
        buf.write("\7\4\2\2\u0313\u0314\5\u0080A\2\u0314\u0316\5\u0082B\2")
        buf.write("\u0315\u0317\5\b\5\2\u0316\u0315\3\2\2\2\u0316\u0317\3")
        buf.write("\2\2\2\u0317\u0319\3\2\2\2\u0318\u031a\5\u0084C\2\u0319")
        buf.write("\u0318\3\2\2\2\u0319\u031a\3\2\2\2\u031a\u031b\3\2\2\2")
        buf.write("\u031b\u031c\5\u0086D\2\u031c\u031e\5\u008eH\2\u031d\u031f")
        buf.write("\5\u0090I\2\u031e\u031d\3\2\2\2\u031e\u031f\3\2\2\2\u031f")
        buf.write("\u0321\3\2\2\2\u0320\u0322\5\u0094K\2\u0321\u0320\3\2")
        buf.write("\2\2\u0321\u0322\3\2\2\2\u0322\u0323\3\2\2\2\u0323\u0324")
        buf.write("\7\5\2\2\u0324\177\3\2\2\2\u0325\u0326\7\3\2\2\u0326\u0327")
        buf.write("\7;\2\2\u0327\u0328\5\u009cO\2\u0328\u0329\7\5\2\2\u0329")
        buf.write("\u0081\3\2\2\2\u032a\u032b\7\3\2\2\u032b\u032c\7<\2\2")
        buf.write("\u032c\u032d\5\u009cO\2\u032d\u032e\7\5\2\2\u032e\u0083")
        buf.write("\3\2\2\2\u032f\u0330\7\3\2\2\u0330\u0331\7=\2\2\u0331")
        buf.write("\u0332\5\f\7\2\u0332\u0333\7\5\2\2\u0333\u0085\3\2\2\2")
        buf.write("\u0334\u0335\7\3\2\2\u0335\u0339\7>\2\2\u0336\u0338\5")
        buf.write("\u0088E\2\u0337\u0336\3\2\2\2\u0338\u033b\3\2\2\2\u0339")
        buf.write("\u0337\3\2\2\2\u0339\u033a\3\2\2\2\u033a\u033c\3\2\2\2")
        buf.write("\u033b\u0339\3\2\2\2\u033c\u033d\7\5\2\2\u033d\u0087\3")
        buf.write("\2\2\2\u033e\u0352\5\u008aF\2\u033f\u0340\7\3\2\2\u0340")
        buf.write("\u0341\7\62\2\2\u0341\u0342\5Z.\2\u0342\u0343\7Q\2\2\u0343")
        buf.write("\u0344\7\5\2\2\u0344\u0352\3\2\2\2\u0345\u0346\7\3\2\2")
        buf.write("\u0346\u0347\7\"\2\2\u0347\u0348\7Q\2\2\u0348\u0349\5")
        buf.write("\u008aF\2\u0349\u034a\7\5\2\2\u034a\u0352\3\2\2\2\u034b")
        buf.write("\u034c\7\3\2\2\u034c\u034d\7\34\2\2\u034d\u034e\5\u009c")
        buf.write("O\2\u034e\u034f\5\u008aF\2\u034f\u0350\7\5\2\2\u0350\u0352")
        buf.write("\3\2\2\2\u0351\u033e\3\2\2\2\u0351\u033f\3\2\2\2\u0351")
        buf.write("\u0345\3\2\2\2\u0351\u034b\3\2\2\2\u0352\u0089\3\2\2\2")
        buf.write("\u0353\u035a\5\u008cG\2\u0354\u0355\7\3\2\2\u0355\u0356")
        buf.write("\7\30\2\2\u0356\u0357\5\u008cG\2\u0357\u0358\7\5\2\2\u0358")
        buf.write("\u035a\3\2\2\2\u0359\u0353\3\2\2\2\u0359\u0354\3\2\2\2")
        buf.write("\u035a\u008b\3\2\2\2\u035b\u035c\7\3\2\2\u035c\u0360\5")
        buf.write("$\23\2\u035d\u035f\5\u009cO\2\u035e\u035d\3\2\2\2\u035f")
        buf.write("\u0362\3\2\2\2\u0360\u035e\3\2\2\2\u0360\u0361\3\2\2\2")
        buf.write("\u0361\u0363\3\2\2\2\u0362\u0360\3\2\2\2\u0363\u0364\7")
        buf.write("\5\2\2\u0364\u008d\3\2\2\2\u0365\u0366\7\3\2\2\u0366\u0367")
        buf.write("\7?\2\2\u0367\u0368\5\66\34\2\u0368\u0369\7\5\2\2\u0369")
        buf.write("\u008f\3\2\2\2\u036a\u036b\7\3\2\2\u036b\u036c\7\20\2")
        buf.write("\2\u036c\u036d\5\u0092J\2\u036d\u036e\7\5\2\2\u036e\u0091")
        buf.write("\3\2\2\2\u036f\u0370\7\3\2\2\u0370\u0374\7\26\2\2\u0371")
        buf.write("\u0373\5\u0092J\2\u0372\u0371\3\2\2\2\u0373\u0376\3\2")
        buf.write("\2\2\u0374\u0372\3\2\2\2\u0374\u0375\3\2\2\2\u0375\u0377")
        buf.write("\3\2\2\2\u0376\u0374\3\2\2\2\u0377\u038a\7\5\2\2\u0378")
        buf.write("\u0379\7\3\2\2\u0379\u037a\7\33\2\2\u037a\u037b\7\3\2")
        buf.write("\2\u037b\u037c\5&\24\2\u037c\u037d\7\5\2\2\u037d\u037e")
        buf.write("\5\u0092J\2\u037e\u037f\7\5\2\2\u037f\u038a\3\2\2\2\u0380")
        buf.write("\u0381\7\3\2\2\u0381\u0383\7!\2\2\u0382\u0384\5\u009c")
        buf.write("O\2\u0383\u0382\3\2\2\2\u0383\u0384\3\2\2\2\u0384\u0385")
        buf.write("\3\2\2\2\u0385\u0386\5\u009aN\2\u0386\u0387\7\5\2\2\u0387")
        buf.write("\u038a\3\2\2\2\u0388\u038a\5\u009aN\2\u0389\u036f\3\2")
        buf.write("\2\2\u0389\u0378\3\2\2\2\u0389\u0380\3\2\2\2\u0389\u0388")
        buf.write("\3\2\2\2\u038a\u0093\3\2\2\2\u038b\u038c\7\3\2\2\u038c")
        buf.write("\u038d\7@\2\2\u038d\u038e\5\u0096L\2\u038e\u038f\5\u0098")
        buf.write("M\2\u038f\u0390\7\5\2\2\u0390\u0095\3\2\2\2\u0391\u0392")
        buf.write("\t\b\2\2\u0392\u0097\3\2\2\2\u0393\u0394\7\3\2\2\u0394")
        buf.write("\u0395\5f\64\2\u0395\u0396\5\u0098M\2\u0396\u0397\5\u0098")
        buf.write("M\2\u0397\u0398\7\5\2\2\u0398\u03bb\3\2\2\2\u0399\u039a")
        buf.write("\7\3\2\2\u039a\u039b\t\t\2\2\u039b\u039d\5\u0098M\2\u039c")
        buf.write("\u039e\5\u0098M\2\u039d\u039c\3\2\2\2\u039e\u039f\3\2")
        buf.write("\2\2\u039f\u039d\3\2\2\2\u039f\u03a0\3\2\2\2\u03a0\u03a1")
        buf.write("\3\2\2\2\u03a1\u03a2\7\5\2\2\u03a2\u03bb\3\2\2\2\u03a3")
        buf.write("\u03a4\7\3\2\2\u03a4\u03a5\7\t\2\2\u03a5\u03a6\5\u0098")
        buf.write("M\2\u03a6\u03a7\7\5\2\2\u03a7\u03bb\3\2\2\2\u03a8\u03bb")
        buf.write("\7Q\2\2\u03a9\u03aa\7\3\2\2\u03aa\u03ae\5\32\16\2\u03ab")
        buf.write("\u03ad\5\u009cO\2\u03ac\u03ab\3\2\2\2\u03ad\u03b0\3\2")
        buf.write("\2\2\u03ae\u03ac\3\2\2\2\u03ae\u03af\3\2\2\2\u03af\u03b1")
        buf.write("\3\2\2\2\u03b0\u03ae\3\2\2\2\u03b1\u03b2\7\5\2\2\u03b2")
        buf.write("\u03bb\3\2\2\2\u03b3\u03bb\5\32\16\2\u03b4\u03bb\7C\2")
        buf.write("\2\u03b5\u03b6\7\3\2\2\u03b6\u03b7\7D\2\2\u03b7\u03b8")
        buf.write("\5\u009cO\2\u03b8\u03b9\7\5\2\2\u03b9\u03bb\3\2\2\2\u03ba")
        buf.write("\u0393\3\2\2\2\u03ba\u0399\3\2\2\2\u03ba\u03a3\3\2\2\2")
        buf.write("\u03ba\u03a8\3\2\2\2\u03ba\u03a9\3\2\2\2\u03ba\u03b3\3")
        buf.write("\2\2\2\u03ba\u03b4\3\2\2\2\u03ba\u03b5\3\2\2\2\u03bb\u0099")
        buf.write("\3\2\2\2\u03bc\u03bd\7\3\2\2\u03bd\u03c1\7\26\2\2\u03be")
        buf.write("\u03c0\5\u009aN\2\u03bf\u03be\3\2\2\2\u03c0\u03c3\3\2")
        buf.write("\2\2\u03c1\u03bf\3\2\2\2\u03c1\u03c2\3\2\2\2\u03c2\u03c4")
        buf.write("\3\2\2\2\u03c3\u03c1\3\2\2\2\u03c4\u0409\7\5\2\2\u03c5")
        buf.write("\u03c6\7\3\2\2\u03c6\u03c7\7\33\2\2\u03c7\u03c8\7\3\2")
        buf.write("\2\u03c8\u03c9\5&\24\2\u03c9\u03ca\7\5\2\2\u03ca\u03cb")
        buf.write("\5\u009aN\2\u03cb\u03cc\7\5\2\2\u03cc\u0409\3\2\2\2\u03cd")
        buf.write("\u03ce\7\3\2\2\u03ce\u03cf\7\"\2\2\u03cf\u03d0\7%\2\2")
        buf.write("\u03d0\u03d1\5\66\34\2\u03d1\u03d2\7\5\2\2\u03d2\u0409")
        buf.write("\3\2\2\2\u03d3\u03d4\7\3\2\2\u03d4\u03d5\7E\2\2\u03d5")
        buf.write("\u03d6\5\66\34\2\u03d6\u03d7\7\5\2\2\u03d7\u0409\3\2\2")
        buf.write("\2\u03d8\u03d9\7\3\2\2\u03d9\u03da\7F\2\2\u03da\u03db")
        buf.write("\5\66\34\2\u03db\u03dc\7\5\2\2\u03dc\u0409\3\2\2\2\u03dd")
        buf.write("\u03de\7\3\2\2\u03de\u03df\7G\2\2\u03df\u03e0\7Q\2\2\u03e0")
        buf.write("\u03e1\5\66\34\2\u03e1\u03e2\7\5\2\2\u03e2\u0409\3\2\2")
        buf.write("\2\u03e3\u03e4\7\3\2\2\u03e4\u03e5\7H\2\2\u03e5\u03e6")
        buf.write("\5\66\34\2\u03e6\u03e7\7\5\2\2\u03e7\u0409\3\2\2\2\u03e8")
        buf.write("\u03e9\7\3\2\2\u03e9\u03ea\7I\2\2\u03ea\u03eb\5\66\34")
        buf.write("\2\u03eb\u03ec\5\66\34\2\u03ec\u03ed\7\5\2\2\u03ed\u0409")
        buf.write("\3\2\2\2\u03ee\u03ef\7\3\2\2\u03ef\u03f0\7J\2\2\u03f0")
        buf.write("\u03f1\5\66\34\2\u03f1\u03f2\5\66\34\2\u03f2\u03f3\7\5")
        buf.write("\2\2\u03f3\u0409\3\2\2\2\u03f4\u03f5\7\3\2\2\u03f5\u03f6")
        buf.write("\7K\2\2\u03f6\u03f7\7Q\2\2\u03f7\u03f8\5\66\34\2\u03f8")
        buf.write("\u03f9\5\66\34\2\u03f9\u03fa\7\5\2\2\u03fa\u0409\3\2\2")
        buf.write("\2\u03fb\u03fc\7\3\2\2\u03fc\u03fd\7L\2\2\u03fd\u03fe")
        buf.write("\7Q\2\2\u03fe\u03ff\7Q\2\2\u03ff\u0400\5\66\34\2\u0400")
        buf.write("\u0401\7\5\2\2\u0401\u0409\3\2\2\2\u0402\u0403\7\3\2\2")
        buf.write("\u0403\u0404\7M\2\2\u0404\u0405\7Q\2\2\u0405\u0406\5\66")
        buf.write("\34\2\u0406\u0407\7\5\2\2\u0407\u0409\3\2\2\2\u0408\u03bc")
        buf.write("\3\2\2\2\u0408\u03c5\3\2\2\2\u0408\u03cd\3\2\2\2\u0408")
        buf.write("\u03d3\3\2\2\2\u0408\u03d8\3\2\2\2\u0408\u03dd\3\2\2\2")
        buf.write("\u0408\u03e3\3\2\2\2\u0408\u03e8\3\2\2\2\u0408\u03ee\3")
        buf.write("\2\2\2\u0408\u03f4\3\2\2\2\u0408\u03fb\3\2\2\2\u0408\u0402")
        buf.write("\3\2\2\2\u0409\u009b\3\2\2\2\u040a\u040b\t\n\2\2\u040b")
        buf.write("\u009d\3\2\2\2V\u00a0\u00a6\u00a9\u00ac\u00af\u00b2\u00b5")
        buf.write("\u00ba\u00c9\u00d5\u00db\u00e0\u00e3\u00e8\u00f2\u00f7")
        buf.write("\u00fb\u0105\u0109\u010d\u0123\u0131\u0137\u013d\u0142")
        buf.write("\u0145\u014a\u0158\u016a\u016c\u0172\u0174\u017b\u017f")
        buf.write("\u0189\u0192\u01be\u01cb\u01d2\u01e4\u01ea\u01f2\u01fe")
        buf.write("\u0204\u0209\u0217\u0230\u0232\u0238\u023a\u024e\u0257")
        buf.write("\u025d\u0264\u0269\u0282\u0290\u0297\u029c\u02a9\u02b0")
        buf.write("\u02be\u02c4\u02cb\u02e4\u02f8\u0307\u030d\u0316\u0319")
        buf.write("\u031e\u0321\u0339\u0351\u0359\u0360\u0374\u0383\u0389")
        buf.write("\u039f\u03ae\u03ba\u03c1\u0408")
        return buf.getvalue()


class pddlParser ( Parser ):

    grammarFileName = "pddl.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'('", "'define'", "')'", "'domain'", 
                     "':requirements'", "':types'", "'-'", "'either'", "'expression'", 
                     "':functions'", "'number'", "':constants'", "':predicates'", 
                     "':constraints'", "':action'", "':parameters'", "':precondition'", 
                     "':effect'", "':agents'", "'and'", "'or'", "'not'", 
                     "'imply'", "'exists'", "'forall'", "'intends'", "'delegated'", 
                     "':durative-action'", "':duration'", "':condition'", 
                     "'preference'", "'at'", "'over'", "'start'", "'end'", 
                     "'all'", "':derived'", "':axiom'", "':vars'", "':context'", 
                     "':implies'", "'when'", "'*'", "'+'", "'/'", "'>'", 
                     "'<'", "'='", "'>='", "'<='", "'assign'", "'scale-up'", 
                     "'scale-down'", "'increase'", "'decrease'", "'?duration'", 
                     "'problem'", "':domain'", "':objects'", "':init'", 
                     "':goal'", "':metric'", "'minimize'", "'maximize'", 
                     "'total-time'", "'is-violated'", "'always'", "'sometime'", 
                     "'within'", "'at-most-once'", "'sometime-after'", "'sometime-before'", 
                     "'always-within'", "'hold-during'", "'hold-after'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "REQUIRE_KEY", "NAME", "VARIABLE", "NUMBER", "LINE_COMMENT", 
                      "WHITESPACE", "DOMAIN", "DOMAIN_NAME", "REQUIREMENTS", 
                      "TYPES", "EITHER_TYPE", "CONSTANTS", "FUNCTIONS", 
                      "PREDICATES", "ACTION", "DURATIVE_ACTION", "PROBLEM", 
                      "PROBLEM_NAME", "PROBLEM_DOMAIN", "OBJECTS", "INIT", 
                      "FUNC_HEAD", "PRECONDITION", "EFFECT", "AND_GD", "OR_GD", 
                      "NOT_GD", "IMPLY_GD", "EXISTS_GD", "FORALL_GD", "COMPARISON_GD", 
                      "AND_EFFECT", "FORALL_EFFECT", "WHEN_EFFECT", "ASSIGN_EFFECT", 
                      "NOT_EFFECT", "PRED_HEAD", "GOAL", "BINARY_OP", "UNARY_MINUS", 
                      "INIT_EQ", "INIT_AT", "NOT_PRED_INIT", "PRED_INST", 
                      "PROBLEM_CONSTRAINT", "PROBLEM_METRIC" ]

    RULE_pddlDoc = 0
    RULE_domain = 1
    RULE_domainName = 2
    RULE_requireDef = 3
    RULE_typesDef = 4
    RULE_typedNameList = 5
    RULE_singleTypeNameList = 6
    RULE_r_type = 7
    RULE_primType = 8
    RULE_functionsDef = 9
    RULE_functionList = 10
    RULE_atomicFunctionSkeleton = 11
    RULE_functionSymbol = 12
    RULE_functionType = 13
    RULE_constantsDef = 14
    RULE_predicatesDef = 15
    RULE_atomicFormulaSkeleton = 16
    RULE_predicate = 17
    RULE_typedVariableList = 18
    RULE_singleTypeVarList = 19
    RULE_constraints = 20
    RULE_structureDef = 21
    RULE_actionDef = 22
    RULE_actionSymbol = 23
    RULE_actionDefBody = 24
    RULE_precondition = 25
    RULE_goalDesc = 26
    RULE_fComp = 27
    RULE_atomicTermFormula = 28
    RULE_term = 29
    RULE_durativeActionDef = 30
    RULE_daDefBody = 31
    RULE_daGD = 32
    RULE_prefTimedGD = 33
    RULE_timedGD = 34
    RULE_timeSpecifier = 35
    RULE_interval = 36
    RULE_derivedDef = 37
    RULE_axiomDef = 38
    RULE_axiomDefBody = 39
    RULE_context = 40
    RULE_implies = 41
    RULE_fExp = 42
    RULE_fExp2 = 43
    RULE_fHead = 44
    RULE_effect = 45
    RULE_agent = 46
    RULE_cEffect = 47
    RULE_pEffect = 48
    RULE_condEffect = 49
    RULE_binaryOp = 50
    RULE_binaryComp = 51
    RULE_assignOp = 52
    RULE_durationConstraint = 53
    RULE_simpleDurationConstraint = 54
    RULE_durOp = 55
    RULE_durValue = 56
    RULE_daEffect = 57
    RULE_timedEffect = 58
    RULE_fAssignDA = 59
    RULE_fExpDA = 60
    RULE_assignOpT = 61
    RULE_problem = 62
    RULE_problemDecl = 63
    RULE_problemDomain = 64
    RULE_objectDecl = 65
    RULE_init = 66
    RULE_initEl = 67
    RULE_nameLiteral = 68
    RULE_atomicNameFormula = 69
    RULE_goal = 70
    RULE_probConstraints = 71
    RULE_prefConGD = 72
    RULE_metricSpec = 73
    RULE_optimization = 74
    RULE_metricFExp = 75
    RULE_conGD = 76
    RULE_name = 77

    ruleNames =  [ "pddlDoc", "domain", "domainName", "requireDef", "typesDef", 
                   "typedNameList", "singleTypeNameList", "r_type", "primType", 
                   "functionsDef", "functionList", "atomicFunctionSkeleton", 
                   "functionSymbol", "functionType", "constantsDef", "predicatesDef", 
                   "atomicFormulaSkeleton", "predicate", "typedVariableList", 
                   "singleTypeVarList", "constraints", "structureDef", "actionDef", 
                   "actionSymbol", "actionDefBody", "precondition", "goalDesc", 
                   "fComp", "atomicTermFormula", "term", "durativeActionDef", 
                   "daDefBody", "daGD", "prefTimedGD", "timedGD", "timeSpecifier", 
                   "interval", "derivedDef", "axiomDef", "axiomDefBody", 
                   "context", "implies", "fExp", "fExp2", "fHead", "effect", 
                   "agent", "cEffect", "pEffect", "condEffect", "binaryOp", 
                   "binaryComp", "assignOp", "durationConstraint", "simpleDurationConstraint", 
                   "durOp", "durValue", "daEffect", "timedEffect", "fAssignDA", 
                   "fExpDA", "assignOpT", "problem", "problemDecl", "problemDomain", 
                   "objectDecl", "init", "initEl", "nameLiteral", "atomicNameFormula", 
                   "goal", "probConstraints", "prefConGD", "metricSpec", 
                   "optimization", "metricFExp", "conGD", "name" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    T__17=18
    T__18=19
    T__19=20
    T__20=21
    T__21=22
    T__22=23
    T__23=24
    T__24=25
    T__25=26
    T__26=27
    T__27=28
    T__28=29
    T__29=30
    T__30=31
    T__31=32
    T__32=33
    T__33=34
    T__34=35
    T__35=36
    T__36=37
    T__37=38
    T__38=39
    T__39=40
    T__40=41
    T__41=42
    T__42=43
    T__43=44
    T__44=45
    T__45=46
    T__46=47
    T__47=48
    T__48=49
    T__49=50
    T__50=51
    T__51=52
    T__52=53
    T__53=54
    T__54=55
    T__55=56
    T__56=57
    T__57=58
    T__58=59
    T__59=60
    T__60=61
    T__61=62
    T__62=63
    T__63=64
    T__64=65
    T__65=66
    T__66=67
    T__67=68
    T__68=69
    T__69=70
    T__70=71
    T__71=72
    T__72=73
    T__73=74
    T__74=75
    REQUIRE_KEY=76
    NAME=77
    VARIABLE=78
    NUMBER=79
    LINE_COMMENT=80
    WHITESPACE=81
    DOMAIN=82
    DOMAIN_NAME=83
    REQUIREMENTS=84
    TYPES=85
    EITHER_TYPE=86
    CONSTANTS=87
    FUNCTIONS=88
    PREDICATES=89
    ACTION=90
    DURATIVE_ACTION=91
    PROBLEM=92
    PROBLEM_NAME=93
    PROBLEM_DOMAIN=94
    OBJECTS=95
    INIT=96
    FUNC_HEAD=97
    PRECONDITION=98
    EFFECT=99
    AND_GD=100
    OR_GD=101
    NOT_GD=102
    IMPLY_GD=103
    EXISTS_GD=104
    FORALL_GD=105
    COMPARISON_GD=106
    AND_EFFECT=107
    FORALL_EFFECT=108
    WHEN_EFFECT=109
    ASSIGN_EFFECT=110
    NOT_EFFECT=111
    PRED_HEAD=112
    GOAL=113
    BINARY_OP=114
    UNARY_MINUS=115
    INIT_EQ=116
    INIT_AT=117
    NOT_PRED_INIT=118
    PRED_INST=119
    PROBLEM_CONSTRAINT=120
    PROBLEM_METRIC=121

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None



    class PddlDocContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def domain(self):
            return self.getTypedRuleContext(pddlParser.DomainContext,0)


        def problem(self):
            return self.getTypedRuleContext(pddlParser.ProblemContext,0)


        def getRuleIndex(self):
            return pddlParser.RULE_pddlDoc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPddlDoc" ):
                listener.enterPddlDoc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPddlDoc" ):
                listener.exitPddlDoc(self)




    def pddlDoc(self):

        localctx = pddlParser.PddlDocContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_pddlDoc)
        try:
            self.state = 158
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 156
                self.domain()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 157
                self.problem()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DomainContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def domainName(self):
            return self.getTypedRuleContext(pddlParser.DomainNameContext,0)


        def requireDef(self):
            return self.getTypedRuleContext(pddlParser.RequireDefContext,0)


        def typesDef(self):
            return self.getTypedRuleContext(pddlParser.TypesDefContext,0)


        def constantsDef(self):
            return self.getTypedRuleContext(pddlParser.ConstantsDefContext,0)


        def predicatesDef(self):
            return self.getTypedRuleContext(pddlParser.PredicatesDefContext,0)


        def functionsDef(self):
            return self.getTypedRuleContext(pddlParser.FunctionsDefContext,0)


        def constraints(self):
            return self.getTypedRuleContext(pddlParser.ConstraintsContext,0)


        def structureDef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(pddlParser.StructureDefContext)
            else:
                return self.getTypedRuleContext(pddlParser.StructureDefContext,i)


        def getRuleIndex(self):
            return pddlParser.RULE_domain

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDomain" ):
                listener.enterDomain(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDomain" ):
                listener.exitDomain(self)




    def domain(self):

        localctx = pddlParser.DomainContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_domain)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 160
            self.match(pddlParser.T__0)
            self.state = 161
            self.match(pddlParser.T__1)
            self.state = 162
            self.domainName()
            self.state = 164
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1,self._ctx)
            if la_ == 1:
                self.state = 163
                self.requireDef()


            self.state = 167
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
            if la_ == 1:
                self.state = 166
                self.typesDef()


            self.state = 170
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,3,self._ctx)
            if la_ == 1:
                self.state = 169
                self.constantsDef()


            self.state = 173
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,4,self._ctx)
            if la_ == 1:
                self.state = 172
                self.predicatesDef()


            self.state = 176
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
            if la_ == 1:
                self.state = 175
                self.functionsDef()


            self.state = 179
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,6,self._ctx)
            if la_ == 1:
                self.state = 178
                self.constraints()


            self.state = 184
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==pddlParser.T__0:
                self.state = 181
                self.structureDef()
                self.state = 186
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 187
            self.match(pddlParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DomainNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self):
            return self.getTypedRuleContext(pddlParser.NameContext,0)


        def getRuleIndex(self):
            return pddlParser.RULE_domainName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDomainName" ):
                listener.enterDomainName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDomainName" ):
                listener.exitDomainName(self)




    def domainName(self):

        localctx = pddlParser.DomainNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_domainName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 189
            self.match(pddlParser.T__0)
            self.state = 190
            self.match(pddlParser.T__3)
            self.state = 191
            self.name()
            self.state = 192
            self.match(pddlParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RequireDefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REQUIRE_KEY(self, i:int=None):
            if i is None:
                return self.getTokens(pddlParser.REQUIRE_KEY)
            else:
                return self.getToken(pddlParser.REQUIRE_KEY, i)

        def getRuleIndex(self):
            return pddlParser.RULE_requireDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRequireDef" ):
                listener.enterRequireDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRequireDef" ):
                listener.exitRequireDef(self)




    def requireDef(self):

        localctx = pddlParser.RequireDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_requireDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 194
            self.match(pddlParser.T__0)
            self.state = 195
            self.match(pddlParser.T__4)
            self.state = 197 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 196
                self.match(pddlParser.REQUIRE_KEY)
                self.state = 199 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==pddlParser.REQUIRE_KEY):
                    break

            self.state = 201
            self.match(pddlParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypesDefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typedNameList(self):
            return self.getTypedRuleContext(pddlParser.TypedNameListContext,0)


        def getRuleIndex(self):
            return pddlParser.RULE_typesDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypesDef" ):
                listener.enterTypesDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypesDef" ):
                listener.exitTypesDef(self)




    def typesDef(self):

        localctx = pddlParser.TypesDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_typesDef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 203
            self.match(pddlParser.T__0)
            self.state = 204
            self.match(pddlParser.T__5)
            self.state = 205
            self.typedNameList()
            self.state = 206
            self.match(pddlParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypedNameListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(pddlParser.NameContext)
            else:
                return self.getTypedRuleContext(pddlParser.NameContext,i)


        def singleTypeNameList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(pddlParser.SingleTypeNameListContext)
            else:
                return self.getTypedRuleContext(pddlParser.SingleTypeNameListContext,i)


        def getRuleIndex(self):
            return pddlParser.RULE_typedNameList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypedNameList" ):
                listener.enterTypedNameList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypedNameList" ):
                listener.exitTypedNameList(self)




    def typedNameList(self):

        localctx = pddlParser.TypedNameListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_typedNameList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 225
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
            if la_ == 1:
                self.state = 211
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 32)) & ~0x3f) == 0 and ((1 << (_la - 32)) & ((1 << (pddlParser.T__31 - 32)) | (1 << (pddlParser.T__32 - 32)) | (1 << (pddlParser.NAME - 32)))) != 0):
                    self.state = 208
                    self.name()
                    self.state = 213
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 215 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 214
                        self.singleTypeNameList()

                    else:
                        raise NoViableAltException(self)
                    self.state = 217 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,10,self._ctx)

                self.state = 222
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 32)) & ~0x3f) == 0 and ((1 << (_la - 32)) & ((1 << (pddlParser.T__31 - 32)) | (1 << (pddlParser.T__32 - 32)) | (1 << (pddlParser.NAME - 32)))) != 0):
                    self.state = 219
                    self.name()
                    self.state = 224
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SingleTypeNameListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.t = None # R_typeContext

        def r_type(self):
            return self.getTypedRuleContext(pddlParser.R_typeContext,0)


        def name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(pddlParser.NameContext)
            else:
                return self.getTypedRuleContext(pddlParser.NameContext,i)


        def getRuleIndex(self):
            return pddlParser.RULE_singleTypeNameList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleTypeNameList" ):
                listener.enterSingleTypeNameList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleTypeNameList" ):
                listener.exitSingleTypeNameList(self)




    def singleTypeNameList(self):

        localctx = pddlParser.SingleTypeNameListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_singleTypeNameList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 228 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 227
                self.name()
                self.state = 230 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 32)) & ~0x3f) == 0 and ((1 << (_la - 32)) & ((1 << (pddlParser.T__31 - 32)) | (1 << (pddlParser.T__32 - 32)) | (1 << (pddlParser.NAME - 32)))) != 0)):
                    break

            self.state = 232
            self.match(pddlParser.T__6)
            self.state = 233
            localctx.t = self.r_type()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class R_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(pddlParser.PrimTypeContext)
            else:
                return self.getTypedRuleContext(pddlParser.PrimTypeContext,i)


        def getRuleIndex(self):
            return pddlParser.RULE_r_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterR_type" ):
                listener.enterR_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitR_type" ):
                listener.exitR_type(self)




    def r_type(self):

        localctx = pddlParser.R_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_r_type)
        self._la = 0 # Token type
        try:
            self.state = 245
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [pddlParser.T__0]:
                self.enterOuterAlt(localctx, 1)
                self.state = 235
                self.match(pddlParser.T__0)
                self.state = 236
                self.match(pddlParser.T__7)
                self.state = 238 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 237
                    self.primType()
                    self.state = 240 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << pddlParser.T__8) | (1 << pddlParser.T__31) | (1 << pddlParser.T__32))) != 0) or _la==pddlParser.NAME):
                        break

                self.state = 242
                self.match(pddlParser.T__2)
                pass
            elif token in [pddlParser.T__8, pddlParser.T__31, pddlParser.T__32, pddlParser.NAME]:
                self.enterOuterAlt(localctx, 2)
                self.state = 244
                self.primType()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PrimTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self):
            return self.getTypedRuleContext(pddlParser.NameContext,0)


        def getRuleIndex(self):
            return pddlParser.RULE_primType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimType" ):
                listener.enterPrimType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimType" ):
                listener.exitPrimType(self)




    def primType(self):

        localctx = pddlParser.PrimTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_primType)
        try:
            self.state = 249
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [pddlParser.T__31, pddlParser.T__32, pddlParser.NAME]:
                self.enterOuterAlt(localctx, 1)
                self.state = 247
                self.name()
                pass
            elif token in [pddlParser.T__8]:
                self.enterOuterAlt(localctx, 2)
                self.state = 248
                self.match(pddlParser.T__8)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctionsDefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionList(self):
            return self.getTypedRuleContext(pddlParser.FunctionListContext,0)


        def getRuleIndex(self):
            return pddlParser.RULE_functionsDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionsDef" ):
                listener.enterFunctionsDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionsDef" ):
                listener.exitFunctionsDef(self)




    def functionsDef(self):

        localctx = pddlParser.FunctionsDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_functionsDef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 251
            self.match(pddlParser.T__0)
            self.state = 252
            self.match(pddlParser.T__9)
            self.state = 253
            self.functionList()
            self.state = 254
            self.match(pddlParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctionListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def atomicFunctionSkeleton(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(pddlParser.AtomicFunctionSkeletonContext)
            else:
                return self.getTypedRuleContext(pddlParser.AtomicFunctionSkeletonContext,i)


        def functionType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(pddlParser.FunctionTypeContext)
            else:
                return self.getTypedRuleContext(pddlParser.FunctionTypeContext,i)


        def getRuleIndex(self):
            return pddlParser.RULE_functionList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionList" ):
                listener.enterFunctionList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionList" ):
                listener.exitFunctionList(self)




    def functionList(self):

        localctx = pddlParser.FunctionListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_functionList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 267
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==pddlParser.T__0:
                self.state = 257 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 256
                        self.atomicFunctionSkeleton()

                    else:
                        raise NoViableAltException(self)
                    self.state = 259 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,17,self._ctx)

                self.state = 263
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==pddlParser.T__6:
                    self.state = 261
                    self.match(pddlParser.T__6)
                    self.state = 262
                    self.functionType()


                self.state = 269
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AtomicFunctionSkeletonContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionSymbol(self):
            return self.getTypedRuleContext(pddlParser.FunctionSymbolContext,0)


        def typedVariableList(self):
            return self.getTypedRuleContext(pddlParser.TypedVariableListContext,0)


        def getRuleIndex(self):
            return pddlParser.RULE_atomicFunctionSkeleton

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtomicFunctionSkeleton" ):
                listener.enterAtomicFunctionSkeleton(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtomicFunctionSkeleton" ):
                listener.exitAtomicFunctionSkeleton(self)




    def atomicFunctionSkeleton(self):

        localctx = pddlParser.AtomicFunctionSkeletonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_atomicFunctionSkeleton)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 270
            self.match(pddlParser.T__0)
            self.state = 271
            self.functionSymbol()
            self.state = 272
            self.typedVariableList()
            self.state = 273
            self.match(pddlParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctionSymbolContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self):
            return self.getTypedRuleContext(pddlParser.NameContext,0)


        def getRuleIndex(self):
            return pddlParser.RULE_functionSymbol

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionSymbol" ):
                listener.enterFunctionSymbol(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionSymbol" ):
                listener.exitFunctionSymbol(self)




    def functionSymbol(self):

        localctx = pddlParser.FunctionSymbolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_functionSymbol)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 275
            self.name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctionTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return pddlParser.RULE_functionType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionType" ):
                listener.enterFunctionType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionType" ):
                listener.exitFunctionType(self)




    def functionType(self):

        localctx = pddlParser.FunctionTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_functionType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 277
            self.match(pddlParser.T__10)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConstantsDefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typedNameList(self):
            return self.getTypedRuleContext(pddlParser.TypedNameListContext,0)


        def getRuleIndex(self):
            return pddlParser.RULE_constantsDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstantsDef" ):
                listener.enterConstantsDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstantsDef" ):
                listener.exitConstantsDef(self)




    def constantsDef(self):

        localctx = pddlParser.ConstantsDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_constantsDef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 279
            self.match(pddlParser.T__0)
            self.state = 280
            self.match(pddlParser.T__11)
            self.state = 281
            self.typedNameList()
            self.state = 282
            self.match(pddlParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PredicatesDefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def atomicFormulaSkeleton(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(pddlParser.AtomicFormulaSkeletonContext)
            else:
                return self.getTypedRuleContext(pddlParser.AtomicFormulaSkeletonContext,i)


        def getRuleIndex(self):
            return pddlParser.RULE_predicatesDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredicatesDef" ):
                listener.enterPredicatesDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredicatesDef" ):
                listener.exitPredicatesDef(self)




    def predicatesDef(self):

        localctx = pddlParser.PredicatesDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_predicatesDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 284
            self.match(pddlParser.T__0)
            self.state = 285
            self.match(pddlParser.T__12)
            self.state = 287 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 286
                self.atomicFormulaSkeleton()
                self.state = 289 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==pddlParser.T__0):
                    break

            self.state = 291
            self.match(pddlParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AtomicFormulaSkeletonContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def predicate(self):
            return self.getTypedRuleContext(pddlParser.PredicateContext,0)


        def typedVariableList(self):
            return self.getTypedRuleContext(pddlParser.TypedVariableListContext,0)


        def getRuleIndex(self):
            return pddlParser.RULE_atomicFormulaSkeleton

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtomicFormulaSkeleton" ):
                listener.enterAtomicFormulaSkeleton(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtomicFormulaSkeleton" ):
                listener.exitAtomicFormulaSkeleton(self)




    def atomicFormulaSkeleton(self):

        localctx = pddlParser.AtomicFormulaSkeletonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_atomicFormulaSkeleton)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 293
            self.match(pddlParser.T__0)
            self.state = 294
            self.predicate()
            self.state = 295
            self.typedVariableList()
            self.state = 296
            self.match(pddlParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PredicateContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self):
            return self.getTypedRuleContext(pddlParser.NameContext,0)


        def getRuleIndex(self):
            return pddlParser.RULE_predicate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredicate" ):
                listener.enterPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredicate" ):
                listener.exitPredicate(self)




    def predicate(self):

        localctx = pddlParser.PredicateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_predicate)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 298
            self.name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypedVariableListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(pddlParser.NAME)
            else:
                return self.getToken(pddlParser.NAME, i)

        def VARIABLE(self, i:int=None):
            if i is None:
                return self.getTokens(pddlParser.VARIABLE)
            else:
                return self.getToken(pddlParser.VARIABLE, i)

        def singleTypeVarList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(pddlParser.SingleTypeVarListContext)
            else:
                return self.getTypedRuleContext(pddlParser.SingleTypeVarListContext,i)


        def getRuleIndex(self):
            return pddlParser.RULE_typedVariableList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypedVariableList" ):
                listener.enterTypedVariableList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypedVariableList" ):
                listener.exitTypedVariableList(self)




    def typedVariableList(self):

        localctx = pddlParser.TypedVariableListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_typedVariableList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 323
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,25,self._ctx)
            if la_ == 1:
                self.state = 303
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==pddlParser.NAME:
                    self.state = 300
                    self.match(pddlParser.NAME)
                    self.state = 305
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 309
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==pddlParser.VARIABLE:
                    self.state = 306
                    self.match(pddlParser.VARIABLE)
                    self.state = 311
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 313 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 312
                        self.singleTypeVarList()

                    else:
                        raise NoViableAltException(self)
                    self.state = 315 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,23,self._ctx)

                self.state = 320
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==pddlParser.VARIABLE:
                    self.state = 317
                    self.match(pddlParser.VARIABLE)
                    self.state = 322
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SingleTypeVarListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.t = None # R_typeContext

        def r_type(self):
            return self.getTypedRuleContext(pddlParser.R_typeContext,0)


        def VARIABLE(self, i:int=None):
            if i is None:
                return self.getTokens(pddlParser.VARIABLE)
            else:
                return self.getToken(pddlParser.VARIABLE, i)

        def getRuleIndex(self):
            return pddlParser.RULE_singleTypeVarList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleTypeVarList" ):
                listener.enterSingleTypeVarList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleTypeVarList" ):
                listener.exitSingleTypeVarList(self)




    def singleTypeVarList(self):

        localctx = pddlParser.SingleTypeVarListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_singleTypeVarList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 326 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 325
                self.match(pddlParser.VARIABLE)
                self.state = 328 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==pddlParser.VARIABLE):
                    break

            self.state = 330
            self.match(pddlParser.T__6)
            self.state = 331
            localctx.t = self.r_type()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConstraintsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conGD(self):
            return self.getTypedRuleContext(pddlParser.ConGDContext,0)


        def getRuleIndex(self):
            return pddlParser.RULE_constraints

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstraints" ):
                listener.enterConstraints(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstraints" ):
                listener.exitConstraints(self)




    def constraints(self):

        localctx = pddlParser.ConstraintsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_constraints)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 333
            self.match(pddlParser.T__0)
            self.state = 334
            self.match(pddlParser.T__13)
            self.state = 335
            self.conGD()
            self.state = 336
            self.match(pddlParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StructureDefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def actionDef(self):
            return self.getTypedRuleContext(pddlParser.ActionDefContext,0)


        def durativeActionDef(self):
            return self.getTypedRuleContext(pddlParser.DurativeActionDefContext,0)


        def derivedDef(self):
            return self.getTypedRuleContext(pddlParser.DerivedDefContext,0)


        def axiomDef(self):
            return self.getTypedRuleContext(pddlParser.AxiomDefContext,0)


        def getRuleIndex(self):
            return pddlParser.RULE_structureDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructureDef" ):
                listener.enterStructureDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructureDef" ):
                listener.exitStructureDef(self)




    def structureDef(self):

        localctx = pddlParser.StructureDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_structureDef)
        try:
            self.state = 342
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,27,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 338
                self.actionDef()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 339
                self.durativeActionDef()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 340
                self.derivedDef()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 341
                self.axiomDef()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ActionDefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def actionSymbol(self):
            return self.getTypedRuleContext(pddlParser.ActionSymbolContext,0)


        def typedVariableList(self):
            return self.getTypedRuleContext(pddlParser.TypedVariableListContext,0)


        def actionDefBody(self):
            return self.getTypedRuleContext(pddlParser.ActionDefBodyContext,0)


        def getRuleIndex(self):
            return pddlParser.RULE_actionDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterActionDef" ):
                listener.enterActionDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitActionDef" ):
                listener.exitActionDef(self)




    def actionDef(self):

        localctx = pddlParser.ActionDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_actionDef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 344
            self.match(pddlParser.T__0)
            self.state = 345
            self.match(pddlParser.T__14)
            self.state = 346
            self.actionSymbol()
            self.state = 347
            self.match(pddlParser.T__15)
            self.state = 348
            self.match(pddlParser.T__0)
            self.state = 349
            self.typedVariableList()
            self.state = 350
            self.match(pddlParser.T__2)
            self.state = 351
            self.actionDefBody()
            self.state = 352
            self.match(pddlParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ActionSymbolContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self):
            return self.getTypedRuleContext(pddlParser.NameContext,0)


        def getRuleIndex(self):
            return pddlParser.RULE_actionSymbol

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterActionSymbol" ):
                listener.enterActionSymbol(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitActionSymbol" ):
                listener.exitActionSymbol(self)




    def actionSymbol(self):

        localctx = pddlParser.ActionSymbolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_actionSymbol)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 354
            self.name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ActionDefBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def precondition(self):
            return self.getTypedRuleContext(pddlParser.PreconditionContext,0)


        def effect(self):
            return self.getTypedRuleContext(pddlParser.EffectContext,0)


        def VARIABLE(self, i:int=None):
            if i is None:
                return self.getTokens(pddlParser.VARIABLE)
            else:
                return self.getToken(pddlParser.VARIABLE, i)

        def getRuleIndex(self):
            return pddlParser.RULE_actionDefBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterActionDefBody" ):
                listener.enterActionDefBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitActionDefBody" ):
                listener.exitActionDefBody(self)




    def actionDefBody(self):

        localctx = pddlParser.ActionDefBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_actionDefBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 362
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==pddlParser.T__16:
                self.state = 356
                self.match(pddlParser.T__16)
                self.state = 360
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,28,self._ctx)
                if la_ == 1:
                    self.state = 357
                    self.match(pddlParser.T__0)
                    self.state = 358
                    self.match(pddlParser.T__2)
                    pass

                elif la_ == 2:
                    self.state = 359
                    self.precondition()
                    pass




            self.state = 370
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==pddlParser.T__17:
                self.state = 364
                self.match(pddlParser.T__17)
                self.state = 368
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
                if la_ == 1:
                    self.state = 365
                    self.match(pddlParser.T__0)
                    self.state = 366
                    self.match(pddlParser.T__2)
                    pass

                elif la_ == 2:
                    self.state = 367
                    self.effect()
                    pass




            self.state = 381
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==pddlParser.T__18:
                self.state = 372
                self.match(pddlParser.T__18)
                self.state = 373
                self.match(pddlParser.T__0)
                self.state = 377
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==pddlParser.VARIABLE:
                    self.state = 374
                    self.match(pddlParser.VARIABLE)
                    self.state = 379
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 380
                self.match(pddlParser.T__2)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PreconditionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def goalDesc(self):
            return self.getTypedRuleContext(pddlParser.GoalDescContext,0)


        def getRuleIndex(self):
            return pddlParser.RULE_precondition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrecondition" ):
                listener.enterPrecondition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrecondition" ):
                listener.exitPrecondition(self)




    def precondition(self):

        localctx = pddlParser.PreconditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_precondition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 383
            self.goalDesc()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GoalDescContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def atomicTermFormula(self):
            return self.getTypedRuleContext(pddlParser.AtomicTermFormulaContext,0)


        def goalDesc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(pddlParser.GoalDescContext)
            else:
                return self.getTypedRuleContext(pddlParser.GoalDescContext,i)


        def typedVariableList(self):
            return self.getTypedRuleContext(pddlParser.TypedVariableListContext,0)


        def VARIABLE(self, i:int=None):
            if i is None:
                return self.getTokens(pddlParser.VARIABLE)
            else:
                return self.getToken(pddlParser.VARIABLE, i)

        def fComp(self):
            return self.getTypedRuleContext(pddlParser.FCompContext,0)


        def getRuleIndex(self):
            return pddlParser.RULE_goalDesc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGoalDesc" ):
                listener.enterGoalDesc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGoalDesc" ):
                listener.exitGoalDesc(self)




    def goalDesc(self):

        localctx = pddlParser.GoalDescContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_goalDesc)
        self._la = 0 # Token type
        try:
            self.state = 444
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,36,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 385
                self.atomicTermFormula()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 386
                self.match(pddlParser.T__0)
                self.state = 387
                self.match(pddlParser.T__19)
                self.state = 391
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==pddlParser.T__0:
                    self.state = 388
                    self.goalDesc()
                    self.state = 393
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 394
                self.match(pddlParser.T__2)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 395
                self.match(pddlParser.T__0)
                self.state = 396
                self.match(pddlParser.T__20)
                self.state = 400
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==pddlParser.T__0:
                    self.state = 397
                    self.goalDesc()
                    self.state = 402
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 403
                self.match(pddlParser.T__2)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 404
                self.match(pddlParser.T__0)
                self.state = 405
                self.match(pddlParser.T__21)
                self.state = 406
                self.goalDesc()
                self.state = 407
                self.match(pddlParser.T__2)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 409
                self.match(pddlParser.T__0)
                self.state = 410
                self.match(pddlParser.T__22)
                self.state = 411
                self.goalDesc()
                self.state = 412
                self.goalDesc()
                self.state = 413
                self.match(pddlParser.T__2)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 415
                self.match(pddlParser.T__0)
                self.state = 416
                self.match(pddlParser.T__23)
                self.state = 417
                self.match(pddlParser.T__0)
                self.state = 418
                self.typedVariableList()
                self.state = 419
                self.match(pddlParser.T__2)
                self.state = 420
                self.goalDesc()
                self.state = 421
                self.match(pddlParser.T__2)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 423
                self.match(pddlParser.T__0)
                self.state = 424
                self.match(pddlParser.T__24)
                self.state = 425
                self.match(pddlParser.T__0)
                self.state = 426
                self.typedVariableList()
                self.state = 427
                self.match(pddlParser.T__2)
                self.state = 428
                self.goalDesc()
                self.state = 429
                self.match(pddlParser.T__2)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 431
                self.match(pddlParser.T__0)
                self.state = 432
                self.match(pddlParser.T__25)
                self.state = 433
                self.match(pddlParser.VARIABLE)
                self.state = 434
                self.goalDesc()
                self.state = 435
                self.match(pddlParser.T__2)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 437
                self.match(pddlParser.T__0)
                self.state = 438
                self.match(pddlParser.T__26)
                self.state = 439
                self.match(pddlParser.VARIABLE)
                self.state = 440
                self.match(pddlParser.VARIABLE)
                self.state = 441
                self.match(pddlParser.VARIABLE)
                self.state = 442
                self.match(pddlParser.T__2)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 443
                self.fComp()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FCompContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def binaryComp(self):
            return self.getTypedRuleContext(pddlParser.BinaryCompContext,0)


        def fExp(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(pddlParser.FExpContext)
            else:
                return self.getTypedRuleContext(pddlParser.FExpContext,i)


        def getRuleIndex(self):
            return pddlParser.RULE_fComp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFComp" ):
                listener.enterFComp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFComp" ):
                listener.exitFComp(self)




    def fComp(self):

        localctx = pddlParser.FCompContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_fComp)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 446
            self.match(pddlParser.T__0)
            self.state = 447
            self.binaryComp()
            self.state = 448
            self.fExp()
            self.state = 449
            self.fExp()
            self.state = 450
            self.match(pddlParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AtomicTermFormulaContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def predicate(self):
            return self.getTypedRuleContext(pddlParser.PredicateContext,0)


        def term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(pddlParser.TermContext)
            else:
                return self.getTypedRuleContext(pddlParser.TermContext,i)


        def getRuleIndex(self):
            return pddlParser.RULE_atomicTermFormula

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtomicTermFormula" ):
                listener.enterAtomicTermFormula(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtomicTermFormula" ):
                listener.exitAtomicTermFormula(self)




    def atomicTermFormula(self):

        localctx = pddlParser.AtomicTermFormulaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_atomicTermFormula)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 452
            self.match(pddlParser.T__0)
            self.state = 453
            self.predicate()
            self.state = 457
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 32)) & ~0x3f) == 0 and ((1 << (_la - 32)) & ((1 << (pddlParser.T__31 - 32)) | (1 << (pddlParser.T__32 - 32)) | (1 << (pddlParser.NAME - 32)) | (1 << (pddlParser.VARIABLE - 32)))) != 0):
                self.state = 454
                self.term()
                self.state = 459
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 460
            self.match(pddlParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TermContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self):
            return self.getTypedRuleContext(pddlParser.NameContext,0)


        def VARIABLE(self):
            return self.getToken(pddlParser.VARIABLE, 0)

        def getRuleIndex(self):
            return pddlParser.RULE_term

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTerm" ):
                listener.enterTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTerm" ):
                listener.exitTerm(self)




    def term(self):

        localctx = pddlParser.TermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_term)
        try:
            self.state = 464
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [pddlParser.T__31, pddlParser.T__32, pddlParser.NAME]:
                self.enterOuterAlt(localctx, 1)
                self.state = 462
                self.name()
                pass
            elif token in [pddlParser.VARIABLE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 463
                self.match(pddlParser.VARIABLE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DurativeActionDefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def actionSymbol(self):
            return self.getTypedRuleContext(pddlParser.ActionSymbolContext,0)


        def typedVariableList(self):
            return self.getTypedRuleContext(pddlParser.TypedVariableListContext,0)


        def daDefBody(self):
            return self.getTypedRuleContext(pddlParser.DaDefBodyContext,0)


        def getRuleIndex(self):
            return pddlParser.RULE_durativeActionDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDurativeActionDef" ):
                listener.enterDurativeActionDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDurativeActionDef" ):
                listener.exitDurativeActionDef(self)




    def durativeActionDef(self):

        localctx = pddlParser.DurativeActionDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_durativeActionDef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 466
            self.match(pddlParser.T__0)
            self.state = 467
            self.match(pddlParser.T__27)
            self.state = 468
            self.actionSymbol()
            self.state = 469
            self.match(pddlParser.T__15)
            self.state = 470
            self.match(pddlParser.T__0)
            self.state = 471
            self.typedVariableList()
            self.state = 472
            self.match(pddlParser.T__2)
            self.state = 473
            self.daDefBody()
            self.state = 474
            self.match(pddlParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DaDefBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def durationConstraint(self):
            return self.getTypedRuleContext(pddlParser.DurationConstraintContext,0)


        def daGD(self):
            return self.getTypedRuleContext(pddlParser.DaGDContext,0)


        def daEffect(self):
            return self.getTypedRuleContext(pddlParser.DaEffectContext,0)


        def getRuleIndex(self):
            return pddlParser.RULE_daDefBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDaDefBody" ):
                listener.enterDaDefBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDaDefBody" ):
                listener.exitDaDefBody(self)




    def daDefBody(self):

        localctx = pddlParser.DaDefBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_daDefBody)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 476
            self.match(pddlParser.T__28)
            self.state = 477
            self.durationConstraint()
            self.state = 478
            self.match(pddlParser.T__29)
            self.state = 482
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,39,self._ctx)
            if la_ == 1:
                self.state = 479
                self.match(pddlParser.T__0)
                self.state = 480
                self.match(pddlParser.T__2)
                pass

            elif la_ == 2:
                self.state = 481
                self.daGD()
                pass


            self.state = 484
            self.match(pddlParser.T__17)
            self.state = 488
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,40,self._ctx)
            if la_ == 1:
                self.state = 485
                self.match(pddlParser.T__0)
                self.state = 486
                self.match(pddlParser.T__2)
                pass

            elif la_ == 2:
                self.state = 487
                self.daEffect()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DaGDContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def prefTimedGD(self):
            return self.getTypedRuleContext(pddlParser.PrefTimedGDContext,0)


        def daGD(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(pddlParser.DaGDContext)
            else:
                return self.getTypedRuleContext(pddlParser.DaGDContext,i)


        def typedVariableList(self):
            return self.getTypedRuleContext(pddlParser.TypedVariableListContext,0)


        def getRuleIndex(self):
            return pddlParser.RULE_daGD

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDaGD" ):
                listener.enterDaGD(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDaGD" ):
                listener.exitDaGD(self)




    def daGD(self):

        localctx = pddlParser.DaGDContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_daGD)
        self._la = 0 # Token type
        try:
            self.state = 508
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,42,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 490
                self.prefTimedGD()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 491
                self.match(pddlParser.T__0)
                self.state = 492
                self.match(pddlParser.T__19)
                self.state = 496
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==pddlParser.T__0:
                    self.state = 493
                    self.daGD()
                    self.state = 498
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 499
                self.match(pddlParser.T__2)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 500
                self.match(pddlParser.T__0)
                self.state = 501
                self.match(pddlParser.T__24)
                self.state = 502
                self.match(pddlParser.T__0)
                self.state = 503
                self.typedVariableList()
                self.state = 504
                self.match(pddlParser.T__2)
                self.state = 505
                self.daGD()
                self.state = 506
                self.match(pddlParser.T__2)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PrefTimedGDContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def timedGD(self):
            return self.getTypedRuleContext(pddlParser.TimedGDContext,0)


        def name(self):
            return self.getTypedRuleContext(pddlParser.NameContext,0)


        def getRuleIndex(self):
            return pddlParser.RULE_prefTimedGD

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrefTimedGD" ):
                listener.enterPrefTimedGD(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrefTimedGD" ):
                listener.exitPrefTimedGD(self)




    def prefTimedGD(self):

        localctx = pddlParser.PrefTimedGDContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_prefTimedGD)
        self._la = 0 # Token type
        try:
            self.state = 519
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,44,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 510
                self.timedGD()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 511
                self.match(pddlParser.T__0)
                self.state = 512
                self.match(pddlParser.T__30)
                self.state = 514
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 32)) & ~0x3f) == 0 and ((1 << (_la - 32)) & ((1 << (pddlParser.T__31 - 32)) | (1 << (pddlParser.T__32 - 32)) | (1 << (pddlParser.NAME - 32)))) != 0):
                    self.state = 513
                    self.name()


                self.state = 516
                self.timedGD()
                self.state = 517
                self.match(pddlParser.T__2)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TimedGDContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def timeSpecifier(self):
            return self.getTypedRuleContext(pddlParser.TimeSpecifierContext,0)


        def goalDesc(self):
            return self.getTypedRuleContext(pddlParser.GoalDescContext,0)


        def interval(self):
            return self.getTypedRuleContext(pddlParser.IntervalContext,0)


        def getRuleIndex(self):
            return pddlParser.RULE_timedGD

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTimedGD" ):
                listener.enterTimedGD(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTimedGD" ):
                listener.exitTimedGD(self)




    def timedGD(self):

        localctx = pddlParser.TimedGDContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_timedGD)
        try:
            self.state = 533
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,45,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 521
                self.match(pddlParser.T__0)
                self.state = 522
                self.match(pddlParser.T__31)
                self.state = 523
                self.timeSpecifier()
                self.state = 524
                self.goalDesc()
                self.state = 525
                self.match(pddlParser.T__2)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 527
                self.match(pddlParser.T__0)
                self.state = 528
                self.match(pddlParser.T__32)
                self.state = 529
                self.interval()
                self.state = 530
                self.goalDesc()
                self.state = 531
                self.match(pddlParser.T__2)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TimeSpecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return pddlParser.RULE_timeSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTimeSpecifier" ):
                listener.enterTimeSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTimeSpecifier" ):
                listener.exitTimeSpecifier(self)




    def timeSpecifier(self):

        localctx = pddlParser.TimeSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_timeSpecifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 535
            _la = self._input.LA(1)
            if not(_la==pddlParser.T__33 or _la==pddlParser.T__34):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IntervalContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return pddlParser.RULE_interval

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterval" ):
                listener.enterInterval(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterval" ):
                listener.exitInterval(self)




    def interval(self):

        localctx = pddlParser.IntervalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_interval)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 537
            self.match(pddlParser.T__35)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DerivedDefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typedVariableList(self):
            return self.getTypedRuleContext(pddlParser.TypedVariableListContext,0)


        def goalDesc(self):
            return self.getTypedRuleContext(pddlParser.GoalDescContext,0)


        def getRuleIndex(self):
            return pddlParser.RULE_derivedDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDerivedDef" ):
                listener.enterDerivedDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDerivedDef" ):
                listener.exitDerivedDef(self)




    def derivedDef(self):

        localctx = pddlParser.DerivedDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_derivedDef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 539
            self.match(pddlParser.T__0)
            self.state = 540
            self.match(pddlParser.T__36)
            self.state = 541
            self.typedVariableList()
            self.state = 542
            self.goalDesc()
            self.state = 543
            self.match(pddlParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AxiomDefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typedVariableList(self):
            return self.getTypedRuleContext(pddlParser.TypedVariableListContext,0)


        def axiomDefBody(self):
            return self.getTypedRuleContext(pddlParser.AxiomDefBodyContext,0)


        def getRuleIndex(self):
            return pddlParser.RULE_axiomDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAxiomDef" ):
                listener.enterAxiomDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAxiomDef" ):
                listener.exitAxiomDef(self)




    def axiomDef(self):

        localctx = pddlParser.AxiomDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_axiomDef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 545
            self.match(pddlParser.T__0)
            self.state = 546
            self.match(pddlParser.T__37)
            self.state = 547
            self.match(pddlParser.T__38)
            self.state = 548
            self.match(pddlParser.T__0)
            self.state = 549
            self.typedVariableList()
            self.state = 550
            self.match(pddlParser.T__2)
            self.state = 551
            self.axiomDefBody()
            self.state = 552
            self.match(pddlParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AxiomDefBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def context(self):
            return self.getTypedRuleContext(pddlParser.ContextContext,0)


        def implies(self):
            return self.getTypedRuleContext(pddlParser.ImpliesContext,0)


        def getRuleIndex(self):
            return pddlParser.RULE_axiomDefBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAxiomDefBody" ):
                listener.enterAxiomDefBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAxiomDefBody" ):
                listener.exitAxiomDefBody(self)




    def axiomDefBody(self):

        localctx = pddlParser.AxiomDefBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_axiomDefBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 560
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==pddlParser.T__39:
                self.state = 554
                self.match(pddlParser.T__39)
                self.state = 558
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,46,self._ctx)
                if la_ == 1:
                    self.state = 555
                    self.match(pddlParser.T__0)
                    self.state = 556
                    self.match(pddlParser.T__2)
                    pass

                elif la_ == 2:
                    self.state = 557
                    self.context()
                    pass




            self.state = 568
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==pddlParser.T__40:
                self.state = 562
                self.match(pddlParser.T__40)
                self.state = 566
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,48,self._ctx)
                if la_ == 1:
                    self.state = 563
                    self.match(pddlParser.T__0)
                    self.state = 564
                    self.match(pddlParser.T__2)
                    pass

                elif la_ == 2:
                    self.state = 565
                    self.implies()
                    pass




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ContextContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def precondition(self):
            return self.getTypedRuleContext(pddlParser.PreconditionContext,0)


        def getRuleIndex(self):
            return pddlParser.RULE_context

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContext" ):
                listener.enterContext(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContext" ):
                listener.exitContext(self)




    def context(self):

        localctx = pddlParser.ContextContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_context)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 570
            self.precondition()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ImpliesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def effect(self):
            return self.getTypedRuleContext(pddlParser.EffectContext,0)


        def getRuleIndex(self):
            return pddlParser.RULE_implies

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImplies" ):
                listener.enterImplies(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImplies" ):
                listener.exitImplies(self)




    def implies(self):

        localctx = pddlParser.ImpliesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_implies)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 572
            self.effect()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FExpContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(pddlParser.NUMBER, 0)

        def VARIABLE(self):
            return self.getToken(pddlParser.VARIABLE, 0)

        def binaryOp(self):
            return self.getTypedRuleContext(pddlParser.BinaryOpContext,0)


        def fExp(self):
            return self.getTypedRuleContext(pddlParser.FExpContext,0)


        def fExp2(self):
            return self.getTypedRuleContext(pddlParser.FExp2Context,0)


        def fHead(self):
            return self.getTypedRuleContext(pddlParser.FHeadContext,0)


        def getRuleIndex(self):
            return pddlParser.RULE_fExp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFExp" ):
                listener.enterFExp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFExp" ):
                listener.exitFExp(self)




    def fExp(self):

        localctx = pddlParser.FExpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_fExp)
        try:
            self.state = 588
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,50,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 574
                self.match(pddlParser.NUMBER)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 575
                self.match(pddlParser.VARIABLE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 576
                self.match(pddlParser.T__0)
                self.state = 577
                self.binaryOp()
                self.state = 578
                self.fExp()
                self.state = 579
                self.fExp2()
                self.state = 580
                self.match(pddlParser.T__2)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 582
                self.match(pddlParser.T__0)
                self.state = 583
                self.match(pddlParser.T__6)
                self.state = 584
                self.fExp()
                self.state = 585
                self.match(pddlParser.T__2)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 587
                self.fHead()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FExp2Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fExp(self):
            return self.getTypedRuleContext(pddlParser.FExpContext,0)


        def getRuleIndex(self):
            return pddlParser.RULE_fExp2

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFExp2" ):
                listener.enterFExp2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFExp2" ):
                listener.exitFExp2(self)




    def fExp2(self):

        localctx = pddlParser.FExp2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_fExp2)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 590
            self.fExp()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FHeadContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionSymbol(self):
            return self.getTypedRuleContext(pddlParser.FunctionSymbolContext,0)


        def term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(pddlParser.TermContext)
            else:
                return self.getTypedRuleContext(pddlParser.TermContext,i)


        def getRuleIndex(self):
            return pddlParser.RULE_fHead

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFHead" ):
                listener.enterFHead(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFHead" ):
                listener.exitFHead(self)




    def fHead(self):

        localctx = pddlParser.FHeadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_fHead)
        self._la = 0 # Token type
        try:
            self.state = 603
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [pddlParser.T__0]:
                self.enterOuterAlt(localctx, 1)
                self.state = 592
                self.match(pddlParser.T__0)
                self.state = 593
                self.functionSymbol()
                self.state = 597
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 32)) & ~0x3f) == 0 and ((1 << (_la - 32)) & ((1 << (pddlParser.T__31 - 32)) | (1 << (pddlParser.T__32 - 32)) | (1 << (pddlParser.NAME - 32)) | (1 << (pddlParser.VARIABLE - 32)))) != 0):
                    self.state = 594
                    self.term()
                    self.state = 599
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 600
                self.match(pddlParser.T__2)
                pass
            elif token in [pddlParser.T__31, pddlParser.T__32, pddlParser.NAME]:
                self.enterOuterAlt(localctx, 2)
                self.state = 602
                self.functionSymbol()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EffectContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def cEffect(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(pddlParser.CEffectContext)
            else:
                return self.getTypedRuleContext(pddlParser.CEffectContext,i)


        def getRuleIndex(self):
            return pddlParser.RULE_effect

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEffect" ):
                listener.enterEffect(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEffect" ):
                listener.exitEffect(self)




    def effect(self):

        localctx = pddlParser.EffectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_effect)
        self._la = 0 # Token type
        try:
            self.state = 615
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,54,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 605
                self.match(pddlParser.T__0)
                self.state = 606
                self.match(pddlParser.T__19)
                self.state = 610
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==pddlParser.T__0:
                    self.state = 607
                    self.cEffect()
                    self.state = 612
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 613
                self.match(pddlParser.T__2)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 614
                self.cEffect()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AgentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typedVariableList(self):
            return self.getTypedRuleContext(pddlParser.TypedVariableListContext,0)


        def getRuleIndex(self):
            return pddlParser.RULE_agent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAgent" ):
                listener.enterAgent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAgent" ):
                listener.exitAgent(self)




    def agent(self):

        localctx = pddlParser.AgentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_agent)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 617
            self.typedVariableList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CEffectContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typedVariableList(self):
            return self.getTypedRuleContext(pddlParser.TypedVariableListContext,0)


        def effect(self):
            return self.getTypedRuleContext(pddlParser.EffectContext,0)


        def goalDesc(self):
            return self.getTypedRuleContext(pddlParser.GoalDescContext,0)


        def condEffect(self):
            return self.getTypedRuleContext(pddlParser.CondEffectContext,0)


        def VARIABLE(self):
            return self.getToken(pddlParser.VARIABLE, 0)

        def pEffect(self):
            return self.getTypedRuleContext(pddlParser.PEffectContext,0)


        def getRuleIndex(self):
            return pddlParser.RULE_cEffect

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCEffect" ):
                listener.enterCEffect(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCEffect" ):
                listener.exitCEffect(self)




    def cEffect(self):

        localctx = pddlParser.CEffectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_cEffect)
        try:
            self.state = 640
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,55,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 619
                self.match(pddlParser.T__0)
                self.state = 620
                self.match(pddlParser.T__24)
                self.state = 621
                self.match(pddlParser.T__0)
                self.state = 622
                self.typedVariableList()
                self.state = 623
                self.match(pddlParser.T__2)
                self.state = 624
                self.effect()
                self.state = 625
                self.match(pddlParser.T__2)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 627
                self.match(pddlParser.T__0)
                self.state = 628
                self.match(pddlParser.T__41)
                self.state = 629
                self.goalDesc()
                self.state = 630
                self.condEffect()
                self.state = 631
                self.match(pddlParser.T__2)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 633
                self.match(pddlParser.T__0)
                self.state = 634
                self.match(pddlParser.T__25)
                self.state = 635
                self.match(pddlParser.VARIABLE)
                self.state = 636
                self.condEffect()
                self.state = 637
                self.match(pddlParser.T__2)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 639
                self.pEffect()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PEffectContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignOp(self):
            return self.getTypedRuleContext(pddlParser.AssignOpContext,0)


        def fHead(self):
            return self.getTypedRuleContext(pddlParser.FHeadContext,0)


        def fExp(self):
            return self.getTypedRuleContext(pddlParser.FExpContext,0)


        def atomicTermFormula(self):
            return self.getTypedRuleContext(pddlParser.AtomicTermFormulaContext,0)


        def getRuleIndex(self):
            return pddlParser.RULE_pEffect

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPEffect" ):
                listener.enterPEffect(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPEffect" ):
                listener.exitPEffect(self)




    def pEffect(self):

        localctx = pddlParser.PEffectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_pEffect)
        try:
            self.state = 654
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,56,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 642
                self.match(pddlParser.T__0)
                self.state = 643
                self.assignOp()
                self.state = 644
                self.fHead()
                self.state = 645
                self.fExp()
                self.state = 646
                self.match(pddlParser.T__2)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 648
                self.match(pddlParser.T__0)
                self.state = 649
                self.match(pddlParser.T__21)
                self.state = 650
                self.atomicTermFormula()
                self.state = 651
                self.match(pddlParser.T__2)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 653
                self.atomicTermFormula()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CondEffectContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pEffect(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(pddlParser.PEffectContext)
            else:
                return self.getTypedRuleContext(pddlParser.PEffectContext,i)


        def getRuleIndex(self):
            return pddlParser.RULE_condEffect

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCondEffect" ):
                listener.enterCondEffect(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCondEffect" ):
                listener.exitCondEffect(self)




    def condEffect(self):

        localctx = pddlParser.CondEffectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_condEffect)
        self._la = 0 # Token type
        try:
            self.state = 666
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,58,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 656
                self.match(pddlParser.T__0)
                self.state = 657
                self.match(pddlParser.T__19)
                self.state = 661
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==pddlParser.T__0:
                    self.state = 658
                    self.pEffect()
                    self.state = 663
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 664
                self.match(pddlParser.T__2)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 665
                self.pEffect()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BinaryOpContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return pddlParser.RULE_binaryOp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBinaryOp" ):
                listener.enterBinaryOp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBinaryOp" ):
                listener.exitBinaryOp(self)




    def binaryOp(self):

        localctx = pddlParser.BinaryOpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_binaryOp)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 668
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << pddlParser.T__6) | (1 << pddlParser.T__42) | (1 << pddlParser.T__43) | (1 << pddlParser.T__44))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BinaryCompContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return pddlParser.RULE_binaryComp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBinaryComp" ):
                listener.enterBinaryComp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBinaryComp" ):
                listener.exitBinaryComp(self)




    def binaryComp(self):

        localctx = pddlParser.BinaryCompContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_binaryComp)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 670
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << pddlParser.T__45) | (1 << pddlParser.T__46) | (1 << pddlParser.T__47) | (1 << pddlParser.T__48) | (1 << pddlParser.T__49))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssignOpContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return pddlParser.RULE_assignOp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignOp" ):
                listener.enterAssignOp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignOp" ):
                listener.exitAssignOp(self)




    def assignOp(self):

        localctx = pddlParser.AssignOpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_assignOp)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 672
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << pddlParser.T__50) | (1 << pddlParser.T__51) | (1 << pddlParser.T__52) | (1 << pddlParser.T__53) | (1 << pddlParser.T__54))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DurationConstraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleDurationConstraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(pddlParser.SimpleDurationConstraintContext)
            else:
                return self.getTypedRuleContext(pddlParser.SimpleDurationConstraintContext,i)


        def getRuleIndex(self):
            return pddlParser.RULE_durationConstraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDurationConstraint" ):
                listener.enterDurationConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDurationConstraint" ):
                listener.exitDurationConstraint(self)




    def durationConstraint(self):

        localctx = pddlParser.DurationConstraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_durationConstraint)
        self._la = 0 # Token type
        try:
            self.state = 686
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,60,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 674
                self.match(pddlParser.T__0)
                self.state = 675
                self.match(pddlParser.T__19)
                self.state = 677 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 676
                    self.simpleDurationConstraint()
                    self.state = 679 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==pddlParser.T__0):
                        break

                self.state = 681
                self.match(pddlParser.T__2)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 683
                self.match(pddlParser.T__0)
                self.state = 684
                self.match(pddlParser.T__2)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 685
                self.simpleDurationConstraint()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SimpleDurationConstraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def durOp(self):
            return self.getTypedRuleContext(pddlParser.DurOpContext,0)


        def durValue(self):
            return self.getTypedRuleContext(pddlParser.DurValueContext,0)


        def timeSpecifier(self):
            return self.getTypedRuleContext(pddlParser.TimeSpecifierContext,0)


        def simpleDurationConstraint(self):
            return self.getTypedRuleContext(pddlParser.SimpleDurationConstraintContext,0)


        def getRuleIndex(self):
            return pddlParser.RULE_simpleDurationConstraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleDurationConstraint" ):
                listener.enterSimpleDurationConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleDurationConstraint" ):
                listener.exitSimpleDurationConstraint(self)




    def simpleDurationConstraint(self):

        localctx = pddlParser.SimpleDurationConstraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_simpleDurationConstraint)
        try:
            self.state = 700
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,61,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 688
                self.match(pddlParser.T__0)
                self.state = 689
                self.durOp()
                self.state = 690
                self.match(pddlParser.T__55)
                self.state = 691
                self.durValue()
                self.state = 692
                self.match(pddlParser.T__2)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 694
                self.match(pddlParser.T__0)
                self.state = 695
                self.match(pddlParser.T__31)
                self.state = 696
                self.timeSpecifier()
                self.state = 697
                self.simpleDurationConstraint()
                self.state = 698
                self.match(pddlParser.T__2)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DurOpContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return pddlParser.RULE_durOp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDurOp" ):
                listener.enterDurOp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDurOp" ):
                listener.exitDurOp(self)




    def durOp(self):

        localctx = pddlParser.DurOpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_durOp)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 702
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << pddlParser.T__47) | (1 << pddlParser.T__48) | (1 << pddlParser.T__49))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DurValueContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(pddlParser.NUMBER, 0)

        def fExp(self):
            return self.getTypedRuleContext(pddlParser.FExpContext,0)


        def getRuleIndex(self):
            return pddlParser.RULE_durValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDurValue" ):
                listener.enterDurValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDurValue" ):
                listener.exitDurValue(self)




    def durValue(self):

        localctx = pddlParser.DurValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_durValue)
        try:
            self.state = 706
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,62,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 704
                self.match(pddlParser.NUMBER)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 705
                self.fExp()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DaEffectContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def daEffect(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(pddlParser.DaEffectContext)
            else:
                return self.getTypedRuleContext(pddlParser.DaEffectContext,i)


        def timedEffect(self):
            return self.getTypedRuleContext(pddlParser.TimedEffectContext,0)


        def typedVariableList(self):
            return self.getTypedRuleContext(pddlParser.TypedVariableListContext,0)


        def daGD(self):
            return self.getTypedRuleContext(pddlParser.DaGDContext,0)


        def assignOp(self):
            return self.getTypedRuleContext(pddlParser.AssignOpContext,0)


        def fHead(self):
            return self.getTypedRuleContext(pddlParser.FHeadContext,0)


        def fExpDA(self):
            return self.getTypedRuleContext(pddlParser.FExpDAContext,0)


        def getRuleIndex(self):
            return pddlParser.RULE_daEffect

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDaEffect" ):
                listener.enterDaEffect(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDaEffect" ):
                listener.exitDaEffect(self)




    def daEffect(self):

        localctx = pddlParser.DaEffectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_daEffect)
        self._la = 0 # Token type
        try:
            self.state = 738
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,64,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 708
                self.match(pddlParser.T__0)
                self.state = 709
                self.match(pddlParser.T__19)
                self.state = 713
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==pddlParser.T__0:
                    self.state = 710
                    self.daEffect()
                    self.state = 715
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 716
                self.match(pddlParser.T__2)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 717
                self.timedEffect()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 718
                self.match(pddlParser.T__0)
                self.state = 719
                self.match(pddlParser.T__24)
                self.state = 720
                self.match(pddlParser.T__0)
                self.state = 721
                self.typedVariableList()
                self.state = 722
                self.match(pddlParser.T__2)
                self.state = 723
                self.daEffect()
                self.state = 724
                self.match(pddlParser.T__2)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 726
                self.match(pddlParser.T__0)
                self.state = 727
                self.match(pddlParser.T__41)
                self.state = 728
                self.daGD()
                self.state = 729
                self.timedEffect()
                self.state = 730
                self.match(pddlParser.T__2)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 732
                self.match(pddlParser.T__0)
                self.state = 733
                self.assignOp()
                self.state = 734
                self.fHead()
                self.state = 735
                self.fExpDA()
                self.state = 736
                self.match(pddlParser.T__2)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TimedEffectContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def timeSpecifier(self):
            return self.getTypedRuleContext(pddlParser.TimeSpecifierContext,0)


        def cEffect(self):
            return self.getTypedRuleContext(pddlParser.CEffectContext,0)


        def fAssignDA(self):
            return self.getTypedRuleContext(pddlParser.FAssignDAContext,0)


        def assignOpT(self):
            return self.getTypedRuleContext(pddlParser.AssignOpTContext,0)


        def fHead(self):
            return self.getTypedRuleContext(pddlParser.FHeadContext,0)


        def fExp(self):
            return self.getTypedRuleContext(pddlParser.FExpContext,0)


        def getRuleIndex(self):
            return pddlParser.RULE_timedEffect

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTimedEffect" ):
                listener.enterTimedEffect(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTimedEffect" ):
                listener.exitTimedEffect(self)




    def timedEffect(self):

        localctx = pddlParser.TimedEffectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_timedEffect)
        try:
            self.state = 758
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,65,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 740
                self.match(pddlParser.T__0)
                self.state = 741
                self.match(pddlParser.T__31)
                self.state = 742
                self.timeSpecifier()
                self.state = 743
                self.cEffect()
                self.state = 744
                self.match(pddlParser.T__2)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 746
                self.match(pddlParser.T__0)
                self.state = 747
                self.match(pddlParser.T__31)
                self.state = 748
                self.timeSpecifier()
                self.state = 749
                self.fAssignDA()
                self.state = 750
                self.match(pddlParser.T__2)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 752
                self.match(pddlParser.T__0)
                self.state = 753
                self.assignOpT()
                self.state = 754
                self.fHead()
                self.state = 755
                self.fExp()
                self.state = 756
                self.match(pddlParser.T__2)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FAssignDAContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignOp(self):
            return self.getTypedRuleContext(pddlParser.AssignOpContext,0)


        def fHead(self):
            return self.getTypedRuleContext(pddlParser.FHeadContext,0)


        def fExpDA(self):
            return self.getTypedRuleContext(pddlParser.FExpDAContext,0)


        def getRuleIndex(self):
            return pddlParser.RULE_fAssignDA

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFAssignDA" ):
                listener.enterFAssignDA(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFAssignDA" ):
                listener.exitFAssignDA(self)




    def fAssignDA(self):

        localctx = pddlParser.FAssignDAContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_fAssignDA)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 760
            self.match(pddlParser.T__0)
            self.state = 761
            self.assignOp()
            self.state = 762
            self.fHead()
            self.state = 763
            self.fExpDA()
            self.state = 764
            self.match(pddlParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FExpDAContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def binaryOp(self):
            return self.getTypedRuleContext(pddlParser.BinaryOpContext,0)


        def fExpDA(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(pddlParser.FExpDAContext)
            else:
                return self.getTypedRuleContext(pddlParser.FExpDAContext,i)


        def fExp(self):
            return self.getTypedRuleContext(pddlParser.FExpContext,0)


        def getRuleIndex(self):
            return pddlParser.RULE_fExpDA

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFExpDA" ):
                listener.enterFExpDA(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFExpDA" ):
                listener.exitFExpDA(self)




    def fExpDA(self):

        localctx = pddlParser.FExpDAContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_fExpDA)
        try:
            self.state = 779
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,67,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 766
                self.match(pddlParser.T__0)
                self.state = 773
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,66,self._ctx)
                if la_ == 1:
                    self.state = 767
                    self.binaryOp()
                    self.state = 768
                    self.fExpDA()
                    self.state = 769
                    self.fExpDA()
                    pass

                elif la_ == 2:
                    self.state = 771
                    self.match(pddlParser.T__6)
                    self.state = 772
                    self.fExpDA()
                    pass


                self.state = 775
                self.match(pddlParser.T__2)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 777
                self.match(pddlParser.T__55)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 778
                self.fExp()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssignOpTContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return pddlParser.RULE_assignOpT

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignOpT" ):
                listener.enterAssignOpT(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignOpT" ):
                listener.exitAssignOpT(self)




    def assignOpT(self):

        localctx = pddlParser.AssignOpTContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_assignOpT)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 781
            _la = self._input.LA(1)
            if not(_la==pddlParser.T__53 or _la==pddlParser.T__54):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ProblemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def problemDecl(self):
            return self.getTypedRuleContext(pddlParser.ProblemDeclContext,0)


        def problemDomain(self):
            return self.getTypedRuleContext(pddlParser.ProblemDomainContext,0)


        def init(self):
            return self.getTypedRuleContext(pddlParser.InitContext,0)


        def goal(self):
            return self.getTypedRuleContext(pddlParser.GoalContext,0)


        def requireDef(self):
            return self.getTypedRuleContext(pddlParser.RequireDefContext,0)


        def objectDecl(self):
            return self.getTypedRuleContext(pddlParser.ObjectDeclContext,0)


        def probConstraints(self):
            return self.getTypedRuleContext(pddlParser.ProbConstraintsContext,0)


        def metricSpec(self):
            return self.getTypedRuleContext(pddlParser.MetricSpecContext,0)


        def getRuleIndex(self):
            return pddlParser.RULE_problem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProblem" ):
                listener.enterProblem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProblem" ):
                listener.exitProblem(self)




    def problem(self):

        localctx = pddlParser.ProblemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_problem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 783
            self.match(pddlParser.T__0)
            self.state = 784
            self.match(pddlParser.T__1)
            self.state = 785
            self.problemDecl()
            self.state = 786
            self.problemDomain()
            self.state = 788
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,68,self._ctx)
            if la_ == 1:
                self.state = 787
                self.requireDef()


            self.state = 791
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,69,self._ctx)
            if la_ == 1:
                self.state = 790
                self.objectDecl()


            self.state = 793
            self.init()
            self.state = 794
            self.goal()
            self.state = 796
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,70,self._ctx)
            if la_ == 1:
                self.state = 795
                self.probConstraints()


            self.state = 799
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==pddlParser.T__0:
                self.state = 798
                self.metricSpec()


            self.state = 801
            self.match(pddlParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ProblemDeclContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self):
            return self.getTypedRuleContext(pddlParser.NameContext,0)


        def getRuleIndex(self):
            return pddlParser.RULE_problemDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProblemDecl" ):
                listener.enterProblemDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProblemDecl" ):
                listener.exitProblemDecl(self)




    def problemDecl(self):

        localctx = pddlParser.ProblemDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_problemDecl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 803
            self.match(pddlParser.T__0)
            self.state = 804
            self.match(pddlParser.T__56)
            self.state = 805
            self.name()
            self.state = 806
            self.match(pddlParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ProblemDomainContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self):
            return self.getTypedRuleContext(pddlParser.NameContext,0)


        def getRuleIndex(self):
            return pddlParser.RULE_problemDomain

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProblemDomain" ):
                listener.enterProblemDomain(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProblemDomain" ):
                listener.exitProblemDomain(self)




    def problemDomain(self):

        localctx = pddlParser.ProblemDomainContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_problemDomain)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 808
            self.match(pddlParser.T__0)
            self.state = 809
            self.match(pddlParser.T__57)
            self.state = 810
            self.name()
            self.state = 811
            self.match(pddlParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ObjectDeclContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typedNameList(self):
            return self.getTypedRuleContext(pddlParser.TypedNameListContext,0)


        def getRuleIndex(self):
            return pddlParser.RULE_objectDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObjectDecl" ):
                listener.enterObjectDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObjectDecl" ):
                listener.exitObjectDecl(self)




    def objectDecl(self):

        localctx = pddlParser.ObjectDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_objectDecl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 813
            self.match(pddlParser.T__0)
            self.state = 814
            self.match(pddlParser.T__58)
            self.state = 815
            self.typedNameList()
            self.state = 816
            self.match(pddlParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InitContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def initEl(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(pddlParser.InitElContext)
            else:
                return self.getTypedRuleContext(pddlParser.InitElContext,i)


        def getRuleIndex(self):
            return pddlParser.RULE_init

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInit" ):
                listener.enterInit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInit" ):
                listener.exitInit(self)




    def init(self):

        localctx = pddlParser.InitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_init)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 818
            self.match(pddlParser.T__0)
            self.state = 819
            self.match(pddlParser.T__59)
            self.state = 823
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==pddlParser.T__0:
                self.state = 820
                self.initEl()
                self.state = 825
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 826
            self.match(pddlParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InitElContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nameLiteral(self):
            return self.getTypedRuleContext(pddlParser.NameLiteralContext,0)


        def fHead(self):
            return self.getTypedRuleContext(pddlParser.FHeadContext,0)


        def NUMBER(self):
            return self.getToken(pddlParser.NUMBER, 0)

        def name(self):
            return self.getTypedRuleContext(pddlParser.NameContext,0)


        def getRuleIndex(self):
            return pddlParser.RULE_initEl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitEl" ):
                listener.enterInitEl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitEl" ):
                listener.exitInitEl(self)




    def initEl(self):

        localctx = pddlParser.InitElContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_initEl)
        try:
            self.state = 847
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,73,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 828
                self.nameLiteral()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 829
                self.match(pddlParser.T__0)
                self.state = 830
                self.match(pddlParser.T__47)
                self.state = 831
                self.fHead()
                self.state = 832
                self.match(pddlParser.NUMBER)
                self.state = 833
                self.match(pddlParser.T__2)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 835
                self.match(pddlParser.T__0)
                self.state = 836
                self.match(pddlParser.T__31)
                self.state = 837
                self.match(pddlParser.NUMBER)
                self.state = 838
                self.nameLiteral()
                self.state = 839
                self.match(pddlParser.T__2)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 841
                self.match(pddlParser.T__0)
                self.state = 842
                self.match(pddlParser.T__25)
                self.state = 843
                self.name()
                self.state = 844
                self.nameLiteral()
                self.state = 845
                self.match(pddlParser.T__2)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NameLiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def atomicNameFormula(self):
            return self.getTypedRuleContext(pddlParser.AtomicNameFormulaContext,0)


        def getRuleIndex(self):
            return pddlParser.RULE_nameLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNameLiteral" ):
                listener.enterNameLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNameLiteral" ):
                listener.exitNameLiteral(self)




    def nameLiteral(self):

        localctx = pddlParser.NameLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_nameLiteral)
        try:
            self.state = 855
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,74,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 849
                self.atomicNameFormula()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 850
                self.match(pddlParser.T__0)
                self.state = 851
                self.match(pddlParser.T__21)
                self.state = 852
                self.atomicNameFormula()
                self.state = 853
                self.match(pddlParser.T__2)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AtomicNameFormulaContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def predicate(self):
            return self.getTypedRuleContext(pddlParser.PredicateContext,0)


        def name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(pddlParser.NameContext)
            else:
                return self.getTypedRuleContext(pddlParser.NameContext,i)


        def getRuleIndex(self):
            return pddlParser.RULE_atomicNameFormula

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtomicNameFormula" ):
                listener.enterAtomicNameFormula(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtomicNameFormula" ):
                listener.exitAtomicNameFormula(self)




    def atomicNameFormula(self):

        localctx = pddlParser.AtomicNameFormulaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_atomicNameFormula)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 857
            self.match(pddlParser.T__0)
            self.state = 858
            self.predicate()
            self.state = 862
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 32)) & ~0x3f) == 0 and ((1 << (_la - 32)) & ((1 << (pddlParser.T__31 - 32)) | (1 << (pddlParser.T__32 - 32)) | (1 << (pddlParser.NAME - 32)))) != 0):
                self.state = 859
                self.name()
                self.state = 864
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 865
            self.match(pddlParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GoalContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def goalDesc(self):
            return self.getTypedRuleContext(pddlParser.GoalDescContext,0)


        def getRuleIndex(self):
            return pddlParser.RULE_goal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGoal" ):
                listener.enterGoal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGoal" ):
                listener.exitGoal(self)




    def goal(self):

        localctx = pddlParser.GoalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_goal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 867
            self.match(pddlParser.T__0)
            self.state = 868
            self.match(pddlParser.T__60)
            self.state = 869
            self.goalDesc()
            self.state = 870
            self.match(pddlParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ProbConstraintsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def prefConGD(self):
            return self.getTypedRuleContext(pddlParser.PrefConGDContext,0)


        def getRuleIndex(self):
            return pddlParser.RULE_probConstraints

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProbConstraints" ):
                listener.enterProbConstraints(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProbConstraints" ):
                listener.exitProbConstraints(self)




    def probConstraints(self):

        localctx = pddlParser.ProbConstraintsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_probConstraints)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 872
            self.match(pddlParser.T__0)
            self.state = 873
            self.match(pddlParser.T__13)
            self.state = 874
            self.prefConGD()
            self.state = 875
            self.match(pddlParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PrefConGDContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def prefConGD(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(pddlParser.PrefConGDContext)
            else:
                return self.getTypedRuleContext(pddlParser.PrefConGDContext,i)


        def typedVariableList(self):
            return self.getTypedRuleContext(pddlParser.TypedVariableListContext,0)


        def conGD(self):
            return self.getTypedRuleContext(pddlParser.ConGDContext,0)


        def name(self):
            return self.getTypedRuleContext(pddlParser.NameContext,0)


        def getRuleIndex(self):
            return pddlParser.RULE_prefConGD

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrefConGD" ):
                listener.enterPrefConGD(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrefConGD" ):
                listener.exitPrefConGD(self)




    def prefConGD(self):

        localctx = pddlParser.PrefConGDContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_prefConGD)
        self._la = 0 # Token type
        try:
            self.state = 903
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,78,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 877
                self.match(pddlParser.T__0)
                self.state = 878
                self.match(pddlParser.T__19)
                self.state = 882
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==pddlParser.T__0:
                    self.state = 879
                    self.prefConGD()
                    self.state = 884
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 885
                self.match(pddlParser.T__2)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 886
                self.match(pddlParser.T__0)
                self.state = 887
                self.match(pddlParser.T__24)
                self.state = 888
                self.match(pddlParser.T__0)
                self.state = 889
                self.typedVariableList()
                self.state = 890
                self.match(pddlParser.T__2)
                self.state = 891
                self.prefConGD()
                self.state = 892
                self.match(pddlParser.T__2)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 894
                self.match(pddlParser.T__0)
                self.state = 895
                self.match(pddlParser.T__30)
                self.state = 897
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 32)) & ~0x3f) == 0 and ((1 << (_la - 32)) & ((1 << (pddlParser.T__31 - 32)) | (1 << (pddlParser.T__32 - 32)) | (1 << (pddlParser.NAME - 32)))) != 0):
                    self.state = 896
                    self.name()


                self.state = 899
                self.conGD()
                self.state = 900
                self.match(pddlParser.T__2)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 902
                self.conGD()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MetricSpecContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def optimization(self):
            return self.getTypedRuleContext(pddlParser.OptimizationContext,0)


        def metricFExp(self):
            return self.getTypedRuleContext(pddlParser.MetricFExpContext,0)


        def getRuleIndex(self):
            return pddlParser.RULE_metricSpec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMetricSpec" ):
                listener.enterMetricSpec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMetricSpec" ):
                listener.exitMetricSpec(self)




    def metricSpec(self):

        localctx = pddlParser.MetricSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_metricSpec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 905
            self.match(pddlParser.T__0)
            self.state = 906
            self.match(pddlParser.T__61)
            self.state = 907
            self.optimization()
            self.state = 908
            self.metricFExp()
            self.state = 909
            self.match(pddlParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OptimizationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return pddlParser.RULE_optimization

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptimization" ):
                listener.enterOptimization(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptimization" ):
                listener.exitOptimization(self)




    def optimization(self):

        localctx = pddlParser.OptimizationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_optimization)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 911
            _la = self._input.LA(1)
            if not(_la==pddlParser.T__62 or _la==pddlParser.T__63):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MetricFExpContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def binaryOp(self):
            return self.getTypedRuleContext(pddlParser.BinaryOpContext,0)


        def metricFExp(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(pddlParser.MetricFExpContext)
            else:
                return self.getTypedRuleContext(pddlParser.MetricFExpContext,i)


        def NUMBER(self):
            return self.getToken(pddlParser.NUMBER, 0)

        def functionSymbol(self):
            return self.getTypedRuleContext(pddlParser.FunctionSymbolContext,0)


        def name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(pddlParser.NameContext)
            else:
                return self.getTypedRuleContext(pddlParser.NameContext,i)


        def getRuleIndex(self):
            return pddlParser.RULE_metricFExp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMetricFExp" ):
                listener.enterMetricFExp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMetricFExp" ):
                listener.exitMetricFExp(self)




    def metricFExp(self):

        localctx = pddlParser.MetricFExpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_metricFExp)
        self._la = 0 # Token type
        try:
            self.state = 952
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,81,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 913
                self.match(pddlParser.T__0)
                self.state = 914
                self.binaryOp()
                self.state = 915
                self.metricFExp()
                self.state = 916
                self.metricFExp()
                self.state = 917
                self.match(pddlParser.T__2)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 919
                self.match(pddlParser.T__0)
                self.state = 920
                _la = self._input.LA(1)
                if not(_la==pddlParser.T__42 or _la==pddlParser.T__44):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 921
                self.metricFExp()
                self.state = 923 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 922
                    self.metricFExp()
                    self.state = 925 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << pddlParser.T__0) | (1 << pddlParser.T__31) | (1 << pddlParser.T__32))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (pddlParser.T__64 - 65)) | (1 << (pddlParser.NAME - 65)) | (1 << (pddlParser.NUMBER - 65)))) != 0)):
                        break

                self.state = 927
                self.match(pddlParser.T__2)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 929
                self.match(pddlParser.T__0)
                self.state = 930
                self.match(pddlParser.T__6)
                self.state = 931
                self.metricFExp()
                self.state = 932
                self.match(pddlParser.T__2)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 934
                self.match(pddlParser.NUMBER)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 935
                self.match(pddlParser.T__0)
                self.state = 936
                self.functionSymbol()
                self.state = 940
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 32)) & ~0x3f) == 0 and ((1 << (_la - 32)) & ((1 << (pddlParser.T__31 - 32)) | (1 << (pddlParser.T__32 - 32)) | (1 << (pddlParser.NAME - 32)))) != 0):
                    self.state = 937
                    self.name()
                    self.state = 942
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 943
                self.match(pddlParser.T__2)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 945
                self.functionSymbol()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 946
                self.match(pddlParser.T__64)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 947
                self.match(pddlParser.T__0)
                self.state = 948
                self.match(pddlParser.T__65)
                self.state = 949
                self.name()
                self.state = 950
                self.match(pddlParser.T__2)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConGDContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conGD(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(pddlParser.ConGDContext)
            else:
                return self.getTypedRuleContext(pddlParser.ConGDContext,i)


        def typedVariableList(self):
            return self.getTypedRuleContext(pddlParser.TypedVariableListContext,0)


        def goalDesc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(pddlParser.GoalDescContext)
            else:
                return self.getTypedRuleContext(pddlParser.GoalDescContext,i)


        def NUMBER(self, i:int=None):
            if i is None:
                return self.getTokens(pddlParser.NUMBER)
            else:
                return self.getToken(pddlParser.NUMBER, i)

        def getRuleIndex(self):
            return pddlParser.RULE_conGD

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConGD" ):
                listener.enterConGD(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConGD" ):
                listener.exitConGD(self)




    def conGD(self):

        localctx = pddlParser.ConGDContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_conGD)
        self._la = 0 # Token type
        try:
            self.state = 1030
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,83,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 954
                self.match(pddlParser.T__0)
                self.state = 955
                self.match(pddlParser.T__19)
                self.state = 959
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==pddlParser.T__0:
                    self.state = 956
                    self.conGD()
                    self.state = 961
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 962
                self.match(pddlParser.T__2)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 963
                self.match(pddlParser.T__0)
                self.state = 964
                self.match(pddlParser.T__24)
                self.state = 965
                self.match(pddlParser.T__0)
                self.state = 966
                self.typedVariableList()
                self.state = 967
                self.match(pddlParser.T__2)
                self.state = 968
                self.conGD()
                self.state = 969
                self.match(pddlParser.T__2)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 971
                self.match(pddlParser.T__0)
                self.state = 972
                self.match(pddlParser.T__31)
                self.state = 973
                self.match(pddlParser.T__34)
                self.state = 974
                self.goalDesc()
                self.state = 975
                self.match(pddlParser.T__2)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 977
                self.match(pddlParser.T__0)
                self.state = 978
                self.match(pddlParser.T__66)
                self.state = 979
                self.goalDesc()
                self.state = 980
                self.match(pddlParser.T__2)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 982
                self.match(pddlParser.T__0)
                self.state = 983
                self.match(pddlParser.T__67)
                self.state = 984
                self.goalDesc()
                self.state = 985
                self.match(pddlParser.T__2)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 987
                self.match(pddlParser.T__0)
                self.state = 988
                self.match(pddlParser.T__68)
                self.state = 989
                self.match(pddlParser.NUMBER)
                self.state = 990
                self.goalDesc()
                self.state = 991
                self.match(pddlParser.T__2)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 993
                self.match(pddlParser.T__0)
                self.state = 994
                self.match(pddlParser.T__69)
                self.state = 995
                self.goalDesc()
                self.state = 996
                self.match(pddlParser.T__2)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 998
                self.match(pddlParser.T__0)
                self.state = 999
                self.match(pddlParser.T__70)
                self.state = 1000
                self.goalDesc()
                self.state = 1001
                self.goalDesc()
                self.state = 1002
                self.match(pddlParser.T__2)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1004
                self.match(pddlParser.T__0)
                self.state = 1005
                self.match(pddlParser.T__71)
                self.state = 1006
                self.goalDesc()
                self.state = 1007
                self.goalDesc()
                self.state = 1008
                self.match(pddlParser.T__2)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1010
                self.match(pddlParser.T__0)
                self.state = 1011
                self.match(pddlParser.T__72)
                self.state = 1012
                self.match(pddlParser.NUMBER)
                self.state = 1013
                self.goalDesc()
                self.state = 1014
                self.goalDesc()
                self.state = 1015
                self.match(pddlParser.T__2)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1017
                self.match(pddlParser.T__0)
                self.state = 1018
                self.match(pddlParser.T__73)
                self.state = 1019
                self.match(pddlParser.NUMBER)
                self.state = 1020
                self.match(pddlParser.NUMBER)
                self.state = 1021
                self.goalDesc()
                self.state = 1022
                self.match(pddlParser.T__2)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1024
                self.match(pddlParser.T__0)
                self.state = 1025
                self.match(pddlParser.T__74)
                self.state = 1026
                self.match(pddlParser.NUMBER)
                self.state = 1027
                self.goalDesc()
                self.state = 1028
                self.match(pddlParser.T__2)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(pddlParser.NAME, 0)

        def getRuleIndex(self):
            return pddlParser.RULE_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterName" ):
                listener.enterName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitName" ):
                listener.exitName(self)




    def name(self):

        localctx = pddlParser.NameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1032
            _la = self._input.LA(1)
            if not(((((_la - 32)) & ~0x3f) == 0 and ((1 << (_la - 32)) & ((1 << (pddlParser.T__31 - 32)) | (1 << (pddlParser.T__32 - 32)) | (1 << (pddlParser.NAME - 32)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





